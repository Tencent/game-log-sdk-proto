/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: tglog_v3.proto */

#ifndef PROTOBUF_C_tglog_5fv3_2eproto__INCLUDED
#define PROTOBUF_C_tglog_5fv3_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/timestamp.pb-c.h"

typedef struct TglogV3__Log TglogV3__Log;
typedef struct TglogV3__AuthReq TglogV3__AuthReq;
typedef struct TglogV3__AuthReq__LabelsEntry TglogV3__AuthReq__LabelsEntry;
typedef struct TglogV3__AuthReq__AnnotationsEntry TglogV3__AuthReq__AnnotationsEntry;
typedef struct TglogV3__AuthRsp TglogV3__AuthRsp;
typedef struct TglogV3__LogReq TglogV3__LogReq;
typedef struct TglogV3__LogReq__LabelsEntry TglogV3__LogReq__LabelsEntry;
typedef struct TglogV3__LogReq__AnnotationsEntry TglogV3__LogReq__AnnotationsEntry;
typedef struct TglogV3__LogRsp TglogV3__LogRsp;
typedef struct TglogV3__HeartbeatReq TglogV3__HeartbeatReq;
typedef struct TglogV3__HeartbeatRsp TglogV3__HeartbeatRsp;
typedef struct TglogV3__ReqHeader TglogV3__ReqHeader;
typedef struct TglogV3__Req TglogV3__Req;
typedef struct TglogV3__RspHeader TglogV3__RspHeader;
typedef struct TglogV3__Rsp TglogV3__Rsp;


/* --- enums --- */

/*
 *协议版本号
 */
typedef enum _TglogV3__ProtoVer {
  TGLOG_V3__PROTO_VER__VER_USELESS = 0,
  /*
   *主版本号
   */
  TGLOG_V3__PROTO_VER__MAJOR = 0,
  /*
   *次版本号
   */
  TGLOG_V3__PROTO_VER__MINOR = 2,
  /*
   *补丁版本号
   */
  TGLOG_V3__PROTO_VER__PATCH = 0
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TGLOG_V3__PROTO_VER)
} TglogV3__ProtoVer;
/*
 *魔数
 */
typedef enum _TglogV3__Magic {
  TGLOG_V3__MAGIC__MAGIC_USELESS = 0,
  /*
   *魔数值
   */
  TGLOG_V3__MAGIC__VAL = 1537
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TGLOG_V3__MAGIC)
} TglogV3__Magic;
typedef enum _TglogV3__Len {
  TGLOG_V3__LEN__LEN_USELESS = 0,
  /*
   *魔数字段2字节
   */
  TGLOG_V3__LEN__MAGIC = 2,
  /*
   *包长字段4字节，包长=帧头长度+包头长度（变长）+包体长度（变长），帧头长度=魔数字段（2）+包长字段(4)+标记字段（1）+包头长字段（2）+保留字段（1）=10字节
   */
  TGLOG_V3__LEN__PACKAGE = 4,
  /*
   *标记字段1字节
   */
  TGLOG_V3__LEN__FLAGS = 1,
  /*
   *包头长度2字节
   */
  TGLOG_V3__LEN__HEADER = 2,
  /*
   *预留字段1字节
   */
  TGLOG_V3__LEN__RESERVE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TGLOG_V3__LEN)
} TglogV3__Len;
/*
 *最大值
 */
typedef enum _TglogV3__Max {
  TGLOG_V3__MAX__MAX_USELESS = 0,
  /*
   *一个请求中最大日志条数
   */
  TGLOG_V3__MAX__LOG_COUNT = 100,
  /*
   *UDP最大请求大小63KB（注：UDP最大请求为65507，只剩下65507-64512=995填充请求头及上下文）
   */
  TGLOG_V3__MAX__UDP_LOG_SIZE = 64512,
  /*
   *裸UDP最大请求为65507  
   */
  TGLOG_V3__MAX__RAW_UDP_LOG_SIZE = 65507,
  /*
   *TCP最大请求大小512KB
   */
  TGLOG_V3__MAX__TCP_LOG_SIZE = 524288
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TGLOG_V3__MAX)
} TglogV3__Max;
/*
 *标记位
 */
typedef enum _TglogV3__Flag {
  /*
   *无
   */
  TGLOG_V3__FLAG__FLAG_NONE = 0,
  /*
   *消息已压缩
   */
  TGLOG_V3__FLAG__FLAG_COMPRESSED = 1,
  /*
   *消息已加密
   */
  TGLOG_V3__FLAG__FLAG_ENCRYPTED = 2,
  /*
   *消息头已压缩
   */
  TGLOG_V3__FLAG__FLAG_COMPRESSED_HEADER = 4,
  /*
   *消息头已加密
   */
  TGLOG_V3__FLAG__FLAG_ENCRYPTED_HEADER = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TGLOG_V3__FLAG)
} TglogV3__Flag;

/* --- messages --- */

/*
 *单条日志
 */
struct  TglogV3__Log
{
  ProtobufCMessage base;
  /*
   *日志名，如"login"，需要额外填日志名，是为了方便生成指标数据
   */
  char *name;
  /*
   *日志内容，如：login|2022-06-1 12:00:00|a|b|c|d
   */
  char *content;
  /*
   *序号，确认用
   */
  uint64_t seq;
};
#define TGLOG_V3__LOG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tglog_v3__log__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


struct  TglogV3__AuthReq__LabelsEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define TGLOG_V3__AUTH_REQ__LABELS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tglog_v3__auth_req__labels_entry__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  TglogV3__AuthReq__AnnotationsEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define TGLOG_V3__AUTH_REQ__ANNOTATIONS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tglog_v3__auth_req__annotations_entry__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 *鉴权请求
 */
struct  TglogV3__AuthReq
{
  ProtobufCMessage base;
  /*
   *标签
   */
  size_t n_labels;
  TglogV3__AuthReq__LabelsEntry **labels;
  /*
   *注解
   */
  size_t n_annotations;
  TglogV3__AuthReq__AnnotationsEntry **annotations;
};
#define TGLOG_V3__AUTH_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tglog_v3__auth_req__descriptor) \
    , 0,NULL, 0,NULL }


/*
 *鉴权响应
 */
struct  TglogV3__AuthRsp
{
  ProtobufCMessage base;
  /*
   *令牌
   */
  char *token;
};
#define TGLOG_V3__AUTH_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tglog_v3__auth_rsp__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  TglogV3__LogReq__LabelsEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define TGLOG_V3__LOG_REQ__LABELS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tglog_v3__log_req__labels_entry__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  TglogV3__LogReq__AnnotationsEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define TGLOG_V3__LOG_REQ__ANNOTATIONS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tglog_v3__log_req__annotations_entry__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 *日志上报请求
 */
struct  TglogV3__LogReq
{
  ProtobufCMessage base;
  /*
   *标签
   */
  size_t n_labels;
  TglogV3__LogReq__LabelsEntry **labels;
  /*
   *注解
   */
  size_t n_annotations;
  TglogV3__LogReq__AnnotationsEntry **annotations;
  /*
   *日志数组
   */
  size_t n_logs;
  TglogV3__Log **logs;
};
#define TGLOG_V3__LOG_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tglog_v3__log_req__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL }


/*
 *日志上报响应
 */
struct  TglogV3__LogRsp
{
  ProtobufCMessage base;
  /*
   *日志序列号
   */
  size_t n_seqs;
  uint64_t *seqs;
};
#define TGLOG_V3__LOG_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tglog_v3__log_rsp__descriptor) \
    , 0,NULL }


/*
 *心跳请求
 */
struct  TglogV3__HeartbeatReq
{
  ProtobufCMessage base;
  Google__Protobuf__Timestamp *ping;
};
#define TGLOG_V3__HEARTBEAT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tglog_v3__heartbeat_req__descriptor) \
    , NULL }


/*
 *心跳响应
 */
struct  TglogV3__HeartbeatRsp
{
  ProtobufCMessage base;
  Google__Protobuf__Timestamp *pong;
};
#define TGLOG_V3__HEARTBEAT_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tglog_v3__heartbeat_rsp__descriptor) \
    , NULL }


/*
 *请求头
 */
struct  TglogV3__ReqHeader
{
  ProtobufCMessage base;
  /*
   *业务ID
   */
  char *appid;
  /*
   *业务名
   */
  char *appname;
  /*
   *业务版本号
   */
  char *appver;
  /*
   *SDK语言
   */
  char *sdklang;
  /*
   *SDK版本号
   */
  char *sdkver;
  /*
   *SDK操作系统
   */
  char *sdkos;
  /*
   *网络协议，tcp/udp
   */
  char *network;
  /*
   *协议版本号
   */
  char *protover;
  /*
   *客户端IP
   */
  char *hostip;
  /*
   *时间戳
   */
  Google__Protobuf__Timestamp *ts;
  /*
   *令牌，公网环境才需要
   */
  char *token;
  /*
   *令牌类型，支持bearer/tglog两种token，bearer即JWT，tglog为自定义的一种token
   */
  char *tokentype;
  /*
   *签名，公网环境才需要
   */
  char *sig;
};
#define TGLOG_V3__REQ_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tglog_v3__req_header__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


typedef enum {
  TGLOG_V3__REQ__REQ__NOT_SET = 0,
  TGLOG_V3__REQ__REQ_AUTH_REQ = 11,
  TGLOG_V3__REQ__REQ_LOG_REQ = 12,
  TGLOG_V3__REQ__REQ_HEARTBEAT_REQ = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TGLOG_V3__REQ__REQ__CASE)
} TglogV3__Req__ReqCase;

/*
 *请求
 * 请求因为涉及到鉴权、签名，将请求头和请求包体分开，
 * 客户端构造请求包体，压缩、加密、签名，再构造请求头，
 * 服务器先解析请求头，鉴权、校验签名，再处理请求包体。
 */
struct  TglogV3__Req
{
  ProtobufCMessage base;
  /*
   *请求ID
   */
  char *reqid;
  /*
   *应用层元数据，可以携带任何数据，在响应中原样返回
   */
  ProtobufCBinaryData appmetadata;
  TglogV3__Req__ReqCase req_case;
  union {
    /*
     *鉴权请求
     */
    TglogV3__AuthReq *authreq;
    /*
     *日志请求
     */
    TglogV3__LogReq *logreq;
    /*
     *心跳请求
     */
    TglogV3__HeartbeatReq *heartbeatreq;
  };
};
#define TGLOG_V3__REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tglog_v3__req__descriptor) \
    , (char *)protobuf_c_empty_string, {0,NULL}, TGLOG_V3__REQ__REQ__NOT_SET, {0} }


/*
 *响应头
 */
struct  TglogV3__RspHeader
{
  ProtobufCMessage base;
  /*
   *错误码
   */
  int32_t code;
  /*
   *错误信息
   */
  char *msg;
  /*
   *请求ID
   */
  char *reqid;
  /*
   *应用层元数据
   */
  ProtobufCBinaryData appmetadata;
};
#define TGLOG_V3__RSP_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tglog_v3__rsp_header__descriptor) \
    , 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL} }


typedef enum {
  TGLOG_V3__RSP__RSP__NOT_SET = 0,
  TGLOG_V3__RSP__RSP_AUTH_RSP = 11,
  TGLOG_V3__RSP__RSP_LOG_RSP = 12,
  TGLOG_V3__RSP__RSP_HEARTBEAT_RSP = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TGLOG_V3__RSP__RSP__CASE)
} TglogV3__Rsp__RspCase;

/*
 *响应
 */
struct  TglogV3__Rsp
{
  ProtobufCMessage base;
  /*
   *响应头，为了简化响应的处理，响应头和响应包体合并 ，客户端直接解包即可
   */
  TglogV3__RspHeader *header;
  TglogV3__Rsp__RspCase rsp_case;
  union {
    /*
     *鉴权响应
     */
    TglogV3__AuthRsp *authrsp;
    /*
     *日志响应
     */
    TglogV3__LogRsp *logrsp;
    /*
     *心跳请求
     */
    TglogV3__HeartbeatRsp *heartbeatrsp;
  };
};
#define TGLOG_V3__RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tglog_v3__rsp__descriptor) \
    , NULL, TGLOG_V3__RSP__RSP__NOT_SET, {0} }


/* TglogV3__Log methods */
void   tglog_v3__log__init
                     (TglogV3__Log         *message);
size_t tglog_v3__log__get_packed_size
                     (const TglogV3__Log   *message);
size_t tglog_v3__log__pack
                     (const TglogV3__Log   *message,
                      uint8_t             *out);
size_t tglog_v3__log__pack_to_buffer
                     (const TglogV3__Log   *message,
                      ProtobufCBuffer     *buffer);
TglogV3__Log *
       tglog_v3__log__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tglog_v3__log__free_unpacked
                     (TglogV3__Log *message,
                      ProtobufCAllocator *allocator);
/* TglogV3__AuthReq__LabelsEntry methods */
void   tglog_v3__auth_req__labels_entry__init
                     (TglogV3__AuthReq__LabelsEntry         *message);
/* TglogV3__AuthReq__AnnotationsEntry methods */
void   tglog_v3__auth_req__annotations_entry__init
                     (TglogV3__AuthReq__AnnotationsEntry         *message);
/* TglogV3__AuthReq methods */
void   tglog_v3__auth_req__init
                     (TglogV3__AuthReq         *message);
size_t tglog_v3__auth_req__get_packed_size
                     (const TglogV3__AuthReq   *message);
size_t tglog_v3__auth_req__pack
                     (const TglogV3__AuthReq   *message,
                      uint8_t             *out);
size_t tglog_v3__auth_req__pack_to_buffer
                     (const TglogV3__AuthReq   *message,
                      ProtobufCBuffer     *buffer);
TglogV3__AuthReq *
       tglog_v3__auth_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tglog_v3__auth_req__free_unpacked
                     (TglogV3__AuthReq *message,
                      ProtobufCAllocator *allocator);
/* TglogV3__AuthRsp methods */
void   tglog_v3__auth_rsp__init
                     (TglogV3__AuthRsp         *message);
size_t tglog_v3__auth_rsp__get_packed_size
                     (const TglogV3__AuthRsp   *message);
size_t tglog_v3__auth_rsp__pack
                     (const TglogV3__AuthRsp   *message,
                      uint8_t             *out);
size_t tglog_v3__auth_rsp__pack_to_buffer
                     (const TglogV3__AuthRsp   *message,
                      ProtobufCBuffer     *buffer);
TglogV3__AuthRsp *
       tglog_v3__auth_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tglog_v3__auth_rsp__free_unpacked
                     (TglogV3__AuthRsp *message,
                      ProtobufCAllocator *allocator);
/* TglogV3__LogReq__LabelsEntry methods */
void   tglog_v3__log_req__labels_entry__init
                     (TglogV3__LogReq__LabelsEntry         *message);
/* TglogV3__LogReq__AnnotationsEntry methods */
void   tglog_v3__log_req__annotations_entry__init
                     (TglogV3__LogReq__AnnotationsEntry         *message);
/* TglogV3__LogReq methods */
void   tglog_v3__log_req__init
                     (TglogV3__LogReq         *message);
size_t tglog_v3__log_req__get_packed_size
                     (const TglogV3__LogReq   *message);
size_t tglog_v3__log_req__pack
                     (const TglogV3__LogReq   *message,
                      uint8_t             *out);
size_t tglog_v3__log_req__pack_to_buffer
                     (const TglogV3__LogReq   *message,
                      ProtobufCBuffer     *buffer);
TglogV3__LogReq *
       tglog_v3__log_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tglog_v3__log_req__free_unpacked
                     (TglogV3__LogReq *message,
                      ProtobufCAllocator *allocator);
/* TglogV3__LogRsp methods */
void   tglog_v3__log_rsp__init
                     (TglogV3__LogRsp         *message);
size_t tglog_v3__log_rsp__get_packed_size
                     (const TglogV3__LogRsp   *message);
size_t tglog_v3__log_rsp__pack
                     (const TglogV3__LogRsp   *message,
                      uint8_t             *out);
size_t tglog_v3__log_rsp__pack_to_buffer
                     (const TglogV3__LogRsp   *message,
                      ProtobufCBuffer     *buffer);
TglogV3__LogRsp *
       tglog_v3__log_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tglog_v3__log_rsp__free_unpacked
                     (TglogV3__LogRsp *message,
                      ProtobufCAllocator *allocator);
/* TglogV3__HeartbeatReq methods */
void   tglog_v3__heartbeat_req__init
                     (TglogV3__HeartbeatReq         *message);
size_t tglog_v3__heartbeat_req__get_packed_size
                     (const TglogV3__HeartbeatReq   *message);
size_t tglog_v3__heartbeat_req__pack
                     (const TglogV3__HeartbeatReq   *message,
                      uint8_t             *out);
size_t tglog_v3__heartbeat_req__pack_to_buffer
                     (const TglogV3__HeartbeatReq   *message,
                      ProtobufCBuffer     *buffer);
TglogV3__HeartbeatReq *
       tglog_v3__heartbeat_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tglog_v3__heartbeat_req__free_unpacked
                     (TglogV3__HeartbeatReq *message,
                      ProtobufCAllocator *allocator);
/* TglogV3__HeartbeatRsp methods */
void   tglog_v3__heartbeat_rsp__init
                     (TglogV3__HeartbeatRsp         *message);
size_t tglog_v3__heartbeat_rsp__get_packed_size
                     (const TglogV3__HeartbeatRsp   *message);
size_t tglog_v3__heartbeat_rsp__pack
                     (const TglogV3__HeartbeatRsp   *message,
                      uint8_t             *out);
size_t tglog_v3__heartbeat_rsp__pack_to_buffer
                     (const TglogV3__HeartbeatRsp   *message,
                      ProtobufCBuffer     *buffer);
TglogV3__HeartbeatRsp *
       tglog_v3__heartbeat_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tglog_v3__heartbeat_rsp__free_unpacked
                     (TglogV3__HeartbeatRsp *message,
                      ProtobufCAllocator *allocator);
/* TglogV3__ReqHeader methods */
void   tglog_v3__req_header__init
                     (TglogV3__ReqHeader         *message);
size_t tglog_v3__req_header__get_packed_size
                     (const TglogV3__ReqHeader   *message);
size_t tglog_v3__req_header__pack
                     (const TglogV3__ReqHeader   *message,
                      uint8_t             *out);
size_t tglog_v3__req_header__pack_to_buffer
                     (const TglogV3__ReqHeader   *message,
                      ProtobufCBuffer     *buffer);
TglogV3__ReqHeader *
       tglog_v3__req_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tglog_v3__req_header__free_unpacked
                     (TglogV3__ReqHeader *message,
                      ProtobufCAllocator *allocator);
/* TglogV3__Req methods */
void   tglog_v3__req__init
                     (TglogV3__Req         *message);
size_t tglog_v3__req__get_packed_size
                     (const TglogV3__Req   *message);
size_t tglog_v3__req__pack
                     (const TglogV3__Req   *message,
                      uint8_t             *out);
size_t tglog_v3__req__pack_to_buffer
                     (const TglogV3__Req   *message,
                      ProtobufCBuffer     *buffer);
TglogV3__Req *
       tglog_v3__req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tglog_v3__req__free_unpacked
                     (TglogV3__Req *message,
                      ProtobufCAllocator *allocator);
/* TglogV3__RspHeader methods */
void   tglog_v3__rsp_header__init
                     (TglogV3__RspHeader         *message);
size_t tglog_v3__rsp_header__get_packed_size
                     (const TglogV3__RspHeader   *message);
size_t tglog_v3__rsp_header__pack
                     (const TglogV3__RspHeader   *message,
                      uint8_t             *out);
size_t tglog_v3__rsp_header__pack_to_buffer
                     (const TglogV3__RspHeader   *message,
                      ProtobufCBuffer     *buffer);
TglogV3__RspHeader *
       tglog_v3__rsp_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tglog_v3__rsp_header__free_unpacked
                     (TglogV3__RspHeader *message,
                      ProtobufCAllocator *allocator);
/* TglogV3__Rsp methods */
void   tglog_v3__rsp__init
                     (TglogV3__Rsp         *message);
size_t tglog_v3__rsp__get_packed_size
                     (const TglogV3__Rsp   *message);
size_t tglog_v3__rsp__pack
                     (const TglogV3__Rsp   *message,
                      uint8_t             *out);
size_t tglog_v3__rsp__pack_to_buffer
                     (const TglogV3__Rsp   *message,
                      ProtobufCBuffer     *buffer);
TglogV3__Rsp *
       tglog_v3__rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tglog_v3__rsp__free_unpacked
                     (TglogV3__Rsp *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*TglogV3__Log_Closure)
                 (const TglogV3__Log *message,
                  void *closure_data);
typedef void (*TglogV3__AuthReq__LabelsEntry_Closure)
                 (const TglogV3__AuthReq__LabelsEntry *message,
                  void *closure_data);
typedef void (*TglogV3__AuthReq__AnnotationsEntry_Closure)
                 (const TglogV3__AuthReq__AnnotationsEntry *message,
                  void *closure_data);
typedef void (*TglogV3__AuthReq_Closure)
                 (const TglogV3__AuthReq *message,
                  void *closure_data);
typedef void (*TglogV3__AuthRsp_Closure)
                 (const TglogV3__AuthRsp *message,
                  void *closure_data);
typedef void (*TglogV3__LogReq__LabelsEntry_Closure)
                 (const TglogV3__LogReq__LabelsEntry *message,
                  void *closure_data);
typedef void (*TglogV3__LogReq__AnnotationsEntry_Closure)
                 (const TglogV3__LogReq__AnnotationsEntry *message,
                  void *closure_data);
typedef void (*TglogV3__LogReq_Closure)
                 (const TglogV3__LogReq *message,
                  void *closure_data);
typedef void (*TglogV3__LogRsp_Closure)
                 (const TglogV3__LogRsp *message,
                  void *closure_data);
typedef void (*TglogV3__HeartbeatReq_Closure)
                 (const TglogV3__HeartbeatReq *message,
                  void *closure_data);
typedef void (*TglogV3__HeartbeatRsp_Closure)
                 (const TglogV3__HeartbeatRsp *message,
                  void *closure_data);
typedef void (*TglogV3__ReqHeader_Closure)
                 (const TglogV3__ReqHeader *message,
                  void *closure_data);
typedef void (*TglogV3__Req_Closure)
                 (const TglogV3__Req *message,
                  void *closure_data);
typedef void (*TglogV3__RspHeader_Closure)
                 (const TglogV3__RspHeader *message,
                  void *closure_data);
typedef void (*TglogV3__Rsp_Closure)
                 (const TglogV3__Rsp *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    tglog_v3__proto_ver__descriptor;
extern const ProtobufCEnumDescriptor    tglog_v3__magic__descriptor;
extern const ProtobufCEnumDescriptor    tglog_v3__len__descriptor;
extern const ProtobufCEnumDescriptor    tglog_v3__max__descriptor;
extern const ProtobufCEnumDescriptor    tglog_v3__flag__descriptor;
extern const ProtobufCMessageDescriptor tglog_v3__log__descriptor;
extern const ProtobufCMessageDescriptor tglog_v3__auth_req__descriptor;
extern const ProtobufCMessageDescriptor tglog_v3__auth_req__labels_entry__descriptor;
extern const ProtobufCMessageDescriptor tglog_v3__auth_req__annotations_entry__descriptor;
extern const ProtobufCMessageDescriptor tglog_v3__auth_rsp__descriptor;
extern const ProtobufCMessageDescriptor tglog_v3__log_req__descriptor;
extern const ProtobufCMessageDescriptor tglog_v3__log_req__labels_entry__descriptor;
extern const ProtobufCMessageDescriptor tglog_v3__log_req__annotations_entry__descriptor;
extern const ProtobufCMessageDescriptor tglog_v3__log_rsp__descriptor;
extern const ProtobufCMessageDescriptor tglog_v3__heartbeat_req__descriptor;
extern const ProtobufCMessageDescriptor tglog_v3__heartbeat_rsp__descriptor;
extern const ProtobufCMessageDescriptor tglog_v3__req_header__descriptor;
extern const ProtobufCMessageDescriptor tglog_v3__req__descriptor;
extern const ProtobufCMessageDescriptor tglog_v3__rsp_header__descriptor;
extern const ProtobufCMessageDescriptor tglog_v3__rsp__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_tglog_5fv3_2eproto__INCLUDED */
