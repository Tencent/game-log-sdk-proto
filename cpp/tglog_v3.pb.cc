// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tglog_v3.proto

#include "tglog_v3.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tglog_v3 {
PROTOBUF_CONSTEXPR Log::Log(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.seq_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogDefaultTypeInternal() {}
  union {
    Log _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogDefaultTypeInternal _Log_default_instance_;
PROTOBUF_CONSTEXPR AuthReq_LabelsEntry_DoNotUse::AuthReq_LabelsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct AuthReq_LabelsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthReq_LabelsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthReq_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AuthReq_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthReq_LabelsEntry_DoNotUseDefaultTypeInternal _AuthReq_LabelsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AuthReq_AnnotationsEntry_DoNotUse::AuthReq_AnnotationsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct AuthReq_AnnotationsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthReq_AnnotationsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthReq_AnnotationsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AuthReq_AnnotationsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthReq_AnnotationsEntry_DoNotUseDefaultTypeInternal _AuthReq_AnnotationsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AuthReq::AuthReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.labels_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.annotations_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AuthReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthReqDefaultTypeInternal() {}
  union {
    AuthReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthReqDefaultTypeInternal _AuthReq_default_instance_;
PROTOBUF_CONSTEXPR AuthRsp::AuthRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AuthRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthRspDefaultTypeInternal() {}
  union {
    AuthRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthRspDefaultTypeInternal _AuthRsp_default_instance_;
PROTOBUF_CONSTEXPR LogReq_LabelsEntry_DoNotUse::LogReq_LabelsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LogReq_LabelsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogReq_LabelsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogReq_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LogReq_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogReq_LabelsEntry_DoNotUseDefaultTypeInternal _LogReq_LabelsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR LogReq_AnnotationsEntry_DoNotUse::LogReq_AnnotationsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LogReq_AnnotationsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogReq_AnnotationsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogReq_AnnotationsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LogReq_AnnotationsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogReq_AnnotationsEntry_DoNotUseDefaultTypeInternal _LogReq_AnnotationsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR LogReq::LogReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.labels_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.annotations_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.logs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogReqDefaultTypeInternal() {}
  union {
    LogReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogReqDefaultTypeInternal _LogReq_default_instance_;
PROTOBUF_CONSTEXPR LogRsp::LogRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.seqs_)*/{}
  , /*decltype(_impl_._seqs_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogRspDefaultTypeInternal() {}
  union {
    LogRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogRspDefaultTypeInternal _LogRsp_default_instance_;
PROTOBUF_CONSTEXPR HeartbeatReq::HeartbeatReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ping_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatReqDefaultTypeInternal() {}
  union {
    HeartbeatReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatReqDefaultTypeInternal _HeartbeatReq_default_instance_;
PROTOBUF_CONSTEXPR HeartbeatRsp::HeartbeatRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pong_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatRspDefaultTypeInternal() {}
  union {
    HeartbeatRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatRspDefaultTypeInternal _HeartbeatRsp_default_instance_;
PROTOBUF_CONSTEXPR ReqHeader::ReqHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.appid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.appname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.appver_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sdklang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sdkver_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sdkos_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.network_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.protover_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tokentype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sig_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ts_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReqHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqHeaderDefaultTypeInternal() {}
  union {
    ReqHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqHeaderDefaultTypeInternal _ReqHeader_default_instance_;
PROTOBUF_CONSTEXPR Req::Req(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reqid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.appmetadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.req_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqDefaultTypeInternal() {}
  union {
    Req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqDefaultTypeInternal _Req_default_instance_;
PROTOBUF_CONSTEXPR RspHeader::RspHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reqid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.appmetadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RspHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RspHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RspHeaderDefaultTypeInternal() {}
  union {
    RspHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RspHeaderDefaultTypeInternal _RspHeader_default_instance_;
PROTOBUF_CONSTEXPR Rsp::Rsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.rsp_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RspDefaultTypeInternal() {}
  union {
    Rsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RspDefaultTypeInternal _Rsp_default_instance_;
}  // namespace tglog_v3
static ::_pb::Metadata file_level_metadata_tglog_5fv3_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tglog_5fv3_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tglog_5fv3_2eproto = nullptr;

const uint32_t TableStruct_tglog_5fv3_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::Log, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::Log, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::Log, _impl_.seq_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::AuthReq_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::AuthReq_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::AuthReq_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::AuthReq_LabelsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tglog_v3::AuthReq_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::AuthReq_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::AuthReq_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::AuthReq_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::AuthReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::AuthReq, _impl_.labels_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::AuthReq, _impl_.annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::AuthRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::AuthRsp, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::LogReq_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::LogReq_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::LogReq_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::LogReq_LabelsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tglog_v3::LogReq_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::LogReq_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::LogReq_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::LogReq_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::LogReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::LogReq, _impl_.labels_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::LogReq, _impl_.annotations_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::LogReq, _impl_.logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::LogRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::LogRsp, _impl_.seqs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::HeartbeatReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::HeartbeatReq, _impl_.ping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::HeartbeatRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::HeartbeatRsp, _impl_.pong_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::ReqHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::ReqHeader, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::ReqHeader, _impl_.appname_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::ReqHeader, _impl_.appver_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::ReqHeader, _impl_.sdklang_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::ReqHeader, _impl_.sdkver_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::ReqHeader, _impl_.sdkos_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::ReqHeader, _impl_.network_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::ReqHeader, _impl_.protover_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::ReqHeader, _impl_.hostip_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::ReqHeader, _impl_.ts_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::ReqHeader, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::ReqHeader, _impl_.tokentype_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::ReqHeader, _impl_.sig_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::Req, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::Req, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::Req, _impl_.reqid_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::Req, _impl_.appmetadata_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tglog_v3::Req, _impl_.req_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::RspHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::RspHeader, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::RspHeader, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::RspHeader, _impl_.reqid_),
  PROTOBUF_FIELD_OFFSET(::tglog_v3::RspHeader, _impl_.appmetadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::Rsp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::Rsp, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tglog_v3::Rsp, _impl_.header_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tglog_v3::Rsp, _impl_.rsp_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tglog_v3::Log)},
  { 9, 17, -1, sizeof(::tglog_v3::AuthReq_LabelsEntry_DoNotUse)},
  { 19, 27, -1, sizeof(::tglog_v3::AuthReq_AnnotationsEntry_DoNotUse)},
  { 29, -1, -1, sizeof(::tglog_v3::AuthReq)},
  { 37, -1, -1, sizeof(::tglog_v3::AuthRsp)},
  { 44, 52, -1, sizeof(::tglog_v3::LogReq_LabelsEntry_DoNotUse)},
  { 54, 62, -1, sizeof(::tglog_v3::LogReq_AnnotationsEntry_DoNotUse)},
  { 64, -1, -1, sizeof(::tglog_v3::LogReq)},
  { 73, -1, -1, sizeof(::tglog_v3::LogRsp)},
  { 80, -1, -1, sizeof(::tglog_v3::HeartbeatReq)},
  { 87, -1, -1, sizeof(::tglog_v3::HeartbeatRsp)},
  { 94, -1, -1, sizeof(::tglog_v3::ReqHeader)},
  { 113, -1, -1, sizeof(::tglog_v3::Req)},
  { 125, -1, -1, sizeof(::tglog_v3::RspHeader)},
  { 135, -1, -1, sizeof(::tglog_v3::Rsp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tglog_v3::_Log_default_instance_._instance,
  &::tglog_v3::_AuthReq_LabelsEntry_DoNotUse_default_instance_._instance,
  &::tglog_v3::_AuthReq_AnnotationsEntry_DoNotUse_default_instance_._instance,
  &::tglog_v3::_AuthReq_default_instance_._instance,
  &::tglog_v3::_AuthRsp_default_instance_._instance,
  &::tglog_v3::_LogReq_LabelsEntry_DoNotUse_default_instance_._instance,
  &::tglog_v3::_LogReq_AnnotationsEntry_DoNotUse_default_instance_._instance,
  &::tglog_v3::_LogReq_default_instance_._instance,
  &::tglog_v3::_LogRsp_default_instance_._instance,
  &::tglog_v3::_HeartbeatReq_default_instance_._instance,
  &::tglog_v3::_HeartbeatRsp_default_instance_._instance,
  &::tglog_v3::_ReqHeader_default_instance_._instance,
  &::tglog_v3::_Req_default_instance_._instance,
  &::tglog_v3::_RspHeader_default_instance_._instance,
  &::tglog_v3::_Rsp_default_instance_._instance,
};

const char descriptor_table_protodef_tglog_5fv3_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016tglog_v3.proto\022\010tglog_v3\032\037google/proto"
  "buf/timestamp.proto\"1\n\003Log\022\014\n\004name\030\001 \001(\t"
  "\022\017\n\007content\030\002 \001(\t\022\013\n\003seq\030\003 \001(\004\"\324\001\n\007AuthR"
  "eq\022-\n\006labels\030\001 \003(\0132\035.tglog_v3.AuthReq.La"
  "belsEntry\0227\n\013annotations\030\002 \003(\0132\".tglog_v"
  "3.AuthReq.AnnotationsEntry\032-\n\013LabelsEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0322\n\020Ann"
  "otationsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
  "\t:\0028\001\"\030\n\007AuthRsp\022\r\n\005token\030\001 \001(\t\"\356\001\n\006LogR"
  "eq\022,\n\006labels\030\001 \003(\0132\034.tglog_v3.LogReq.Lab"
  "elsEntry\0226\n\013annotations\030\002 \003(\0132!.tglog_v3"
  ".LogReq.AnnotationsEntry\022\033\n\004logs\030\003 \003(\0132\r"
  ".tglog_v3.Log\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\t:\0028\001\0322\n\020AnnotationsEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\026\n\006LogR"
  "sp\022\014\n\004seqs\030\001 \003(\004\"8\n\014HeartbeatReq\022(\n\004ping"
  "\030\001 \001(\0132\032.google.protobuf.Timestamp\"8\n\014He"
  "artbeatRsp\022(\n\004pong\030\001 \001(\0132\032.google.protob"
  "uf.Timestamp\"\365\001\n\tReqHeader\022\r\n\005appID\030\001 \001("
  "\t\022\017\n\007appName\030\002 \001(\t\022\016\n\006appVer\030\003 \001(\t\022\017\n\007sd"
  "kLang\030\004 \001(\t\022\016\n\006sdkVer\030\005 \001(\t\022\r\n\005sdkOS\030\006 \001"
  "(\t\022\017\n\007network\030\007 \001(\t\022\020\n\010protoVer\030\010 \001(\t\022\016\n"
  "\006hostIP\030\t \001(\t\022&\n\002ts\030\n \001(\0132\032.google.proto"
  "buf.Timestamp\022\r\n\005token\030\013 \001(\t\022\021\n\ttokenTyp"
  "e\030\014 \001(\t\022\013\n\003sig\030\r \001(\t\"\252\001\n\003Req\022\r\n\005reqID\030\001 "
  "\001(\t\022\023\n\013appMetaData\030\002 \001(\014\022$\n\007authReq\030\013 \001("
  "\0132\021.tglog_v3.AuthReqH\000\022\"\n\006logReq\030\014 \001(\0132\020"
  ".tglog_v3.LogReqH\000\022.\n\014heartbeatReq\030\r \001(\013"
  "2\026.tglog_v3.HeartbeatReqH\000B\005\n\003req\"J\n\tRsp"
  "Header\022\014\n\004code\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022\r\n\005req"
  "ID\030\003 \001(\t\022\023\n\013appMetaData\030\004 \001(\014\"\253\001\n\003Rsp\022#\n"
  "\006header\030\001 \001(\0132\023.tglog_v3.RspHeader\022$\n\007au"
  "thRsp\030\013 \001(\0132\021.tglog_v3.AuthRspH\000\022\"\n\006logR"
  "sp\030\014 \001(\0132\020.tglog_v3.LogRspH\000\022.\n\014heartbea"
  "tRsp\030\r \001(\0132\026.tglog_v3.HeartbeatRspH\000B\005\n\003"
  "rsp*@\n\010ProtoVer\022\017\n\013VER_USELESS\020\000\022\t\n\005MAJO"
  "R\020\000\022\t\n\005MINOR\020\002\022\t\n\005PATCH\020\000\032\002\020\001*$\n\005Magic\022\021"
  "\n\rMAGIC_USELESS\020\000\022\010\n\003VAL\020\201\014*V\n\003Len\022\017\n\013LE"
  "N_USELESS\020\000\022\t\n\005MAGIC\020\002\022\013\n\007PACKAGE\020\004\022\t\n\005F"
  "LAGS\020\001\022\n\n\006HEADER\020\002\022\013\n\007RESERVE\020\001\032\002\020\001*e\n\003M"
  "ax\022\017\n\013MAX_USELESS\020\000\022\r\n\tLOG_COUNT\020d\022\022\n\014UD"
  "P_LOG_SIZE\020\200\370\003\022\026\n\020RAW_UDP_LOG_SIZE\020\343\377\003\022\022"
  "\n\014TCP_LOG_SIZE\020\200\200 *u\n\004Flag\022\r\n\tFLAG_NONE\020"
  "\000\022\023\n\017FLAG_COMPRESSED\020\001\022\022\n\016FLAG_ENCRYPTED"
  "\020\002\022\032\n\026FLAG_COMPRESSED_HEADER\020\004\022\031\n\025FLAG_E"
  "NCRYPTED_HEADER\020\010BM\n\037tencent.com.tglog.v"
  "3.proto.javaZ*github.com/tencent/game-lo"
  "g-sdk-proto/pbgob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tglog_5fv3_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_tglog_5fv3_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tglog_5fv3_2eproto = {
    false, false, 1904, descriptor_table_protodef_tglog_5fv3_2eproto,
    "tglog_v3.proto",
    &descriptor_table_tglog_5fv3_2eproto_once, descriptor_table_tglog_5fv3_2eproto_deps, 1, 15,
    schemas, file_default_instances, TableStruct_tglog_5fv3_2eproto::offsets,
    file_level_metadata_tglog_5fv3_2eproto, file_level_enum_descriptors_tglog_5fv3_2eproto,
    file_level_service_descriptors_tglog_5fv3_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tglog_5fv3_2eproto_getter() {
  return &descriptor_table_tglog_5fv3_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tglog_5fv3_2eproto(&descriptor_table_tglog_5fv3_2eproto);
namespace tglog_v3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoVer_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tglog_5fv3_2eproto);
  return file_level_enum_descriptors_tglog_5fv3_2eproto[0];
}
bool ProtoVer_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Magic_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tglog_5fv3_2eproto);
  return file_level_enum_descriptors_tglog_5fv3_2eproto[1];
}
bool Magic_IsValid(int value) {
  switch (value) {
    case 0:
    case 1537:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Len_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tglog_5fv3_2eproto);
  return file_level_enum_descriptors_tglog_5fv3_2eproto[2];
}
bool Len_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Max_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tglog_5fv3_2eproto);
  return file_level_enum_descriptors_tglog_5fv3_2eproto[3];
}
bool Max_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 64512:
    case 65507:
    case 524288:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Flag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tglog_5fv3_2eproto);
  return file_level_enum_descriptors_tglog_5fv3_2eproto[4];
}
bool Flag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Log::_Internal {
 public:
};

Log::Log(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tglog_v3.Log)
}
Log::Log(const Log& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Log* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.seq_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.seq_ = from._impl_.seq_;
  // @@protoc_insertion_point(copy_constructor:tglog_v3.Log)
}

inline void Log::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.seq_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:tglog_v3.Log)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Log::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.content_.Destroy();
}

void Log::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:tglog_v3.Log)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.seq_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Log::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tglog_v3.Log.name"));
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tglog_v3.Log.content"));
        } else
          goto handle_unusual;
        continue;
      // uint64 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Log::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tglog_v3.Log)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tglog_v3.Log.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tglog_v3.Log.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // uint64 seq = 3;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tglog_v3.Log)
  return target;
}

size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tglog_v3.Log)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint64 seq = 3;
  if (this->_internal_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Log::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Log::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Log::GetClassData() const { return &_class_data_; }


void Log::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Log*>(&to_msg);
  auto& from = static_cast<const Log&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tglog_v3.Log)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_seq() != 0) {
    _this->_internal_set_seq(from._internal_seq());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tglog_v3.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  return true;
}

void Log::InternalSwap(Log* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.seq_, other->_impl_.seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Log::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tglog_5fv3_2eproto_getter, &descriptor_table_tglog_5fv3_2eproto_once,
      file_level_metadata_tglog_5fv3_2eproto[0]);
}

// ===================================================================

AuthReq_LabelsEntry_DoNotUse::AuthReq_LabelsEntry_DoNotUse() {}
AuthReq_LabelsEntry_DoNotUse::AuthReq_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AuthReq_LabelsEntry_DoNotUse::MergeFrom(const AuthReq_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AuthReq_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tglog_5fv3_2eproto_getter, &descriptor_table_tglog_5fv3_2eproto_once,
      file_level_metadata_tglog_5fv3_2eproto[1]);
}

// ===================================================================

AuthReq_AnnotationsEntry_DoNotUse::AuthReq_AnnotationsEntry_DoNotUse() {}
AuthReq_AnnotationsEntry_DoNotUse::AuthReq_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AuthReq_AnnotationsEntry_DoNotUse::MergeFrom(const AuthReq_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AuthReq_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tglog_5fv3_2eproto_getter, &descriptor_table_tglog_5fv3_2eproto_once,
      file_level_metadata_tglog_5fv3_2eproto[2]);
}

// ===================================================================

class AuthReq::_Internal {
 public:
};

AuthReq::AuthReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AuthReq::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:tglog_v3.AuthReq)
}
AuthReq::AuthReq(const AuthReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.labels_)*/{}
    , /*decltype(_impl_.annotations_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  _this->_impl_.annotations_.MergeFrom(from._impl_.annotations_);
  // @@protoc_insertion_point(copy_constructor:tglog_v3.AuthReq)
}

inline void AuthReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.labels_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.annotations_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AuthReq::~AuthReq() {
  // @@protoc_insertion_point(destructor:tglog_v3.AuthReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AuthReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.labels_.Destruct();
  _impl_.labels_.~MapField();
  _impl_.annotations_.Destruct();
  _impl_.annotations_.~MapField();
}

void AuthReq::ArenaDtor(void* object) {
  AuthReq* _this = reinterpret_cast< AuthReq* >(object);
  _this->_impl_.labels_.Destruct();
  _this->_impl_.annotations_.Destruct();
}
void AuthReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthReq::Clear() {
// @@protoc_insertion_point(message_clear_start:tglog_v3.AuthReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.labels_.Clear();
  _impl_.annotations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.annotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tglog_v3.AuthReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> labels = 1;
  if (!this->_internal_labels().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AuthReq_LabelsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_labels();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tglog_v3.AuthReq.LabelsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tglog_v3.AuthReq.LabelsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> annotations = 2;
  if (!this->_internal_annotations().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AuthReq_AnnotationsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_annotations();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tglog_v3.AuthReq.AnnotationsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tglog_v3.AuthReq.AnnotationsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tglog_v3.AuthReq)
  return target;
}

size_t AuthReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tglog_v3.AuthReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += AuthReq_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> annotations = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_annotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_annotations().begin();
      it != this->_internal_annotations().end(); ++it) {
    total_size += AuthReq_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthReq::GetClassData() const { return &_class_data_; }


void AuthReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthReq*>(&to_msg);
  auto& from = static_cast<const AuthReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tglog_v3.AuthReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  _this->_impl_.annotations_.MergeFrom(from._impl_.annotations_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthReq::CopyFrom(const AuthReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tglog_v3.AuthReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthReq::IsInitialized() const {
  return true;
}

void AuthReq::InternalSwap(AuthReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
  _impl_.annotations_.InternalSwap(&other->_impl_.annotations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tglog_5fv3_2eproto_getter, &descriptor_table_tglog_5fv3_2eproto_once,
      file_level_metadata_tglog_5fv3_2eproto[3]);
}

// ===================================================================

class AuthRsp::_Internal {
 public:
};

AuthRsp::AuthRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tglog_v3.AuthRsp)
}
AuthRsp::AuthRsp(const AuthRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tglog_v3.AuthRsp)
}

inline void AuthRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthRsp::~AuthRsp() {
  // @@protoc_insertion_point(destructor:tglog_v3.AuthRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void AuthRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:tglog_v3.AuthRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tglog_v3.AuthRsp.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tglog_v3.AuthRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tglog_v3.AuthRsp.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tglog_v3.AuthRsp)
  return target;
}

size_t AuthRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tglog_v3.AuthRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthRsp::GetClassData() const { return &_class_data_; }


void AuthRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthRsp*>(&to_msg);
  auto& from = static_cast<const AuthRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tglog_v3.AuthRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthRsp::CopyFrom(const AuthRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tglog_v3.AuthRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRsp::IsInitialized() const {
  return true;
}

void AuthRsp::InternalSwap(AuthRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tglog_5fv3_2eproto_getter, &descriptor_table_tglog_5fv3_2eproto_once,
      file_level_metadata_tglog_5fv3_2eproto[4]);
}

// ===================================================================

LogReq_LabelsEntry_DoNotUse::LogReq_LabelsEntry_DoNotUse() {}
LogReq_LabelsEntry_DoNotUse::LogReq_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LogReq_LabelsEntry_DoNotUse::MergeFrom(const LogReq_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LogReq_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tglog_5fv3_2eproto_getter, &descriptor_table_tglog_5fv3_2eproto_once,
      file_level_metadata_tglog_5fv3_2eproto[5]);
}

// ===================================================================

LogReq_AnnotationsEntry_DoNotUse::LogReq_AnnotationsEntry_DoNotUse() {}
LogReq_AnnotationsEntry_DoNotUse::LogReq_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LogReq_AnnotationsEntry_DoNotUse::MergeFrom(const LogReq_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LogReq_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tglog_5fv3_2eproto_getter, &descriptor_table_tglog_5fv3_2eproto_once,
      file_level_metadata_tglog_5fv3_2eproto[6]);
}

// ===================================================================

class LogReq::_Internal {
 public:
};

LogReq::LogReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &LogReq::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:tglog_v3.LogReq)
}
LogReq::LogReq(const LogReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.labels_)*/{}
    , /*decltype(_impl_.annotations_)*/{}
    , decltype(_impl_.logs_){from._impl_.logs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  _this->_impl_.annotations_.MergeFrom(from._impl_.annotations_);
  // @@protoc_insertion_point(copy_constructor:tglog_v3.LogReq)
}

inline void LogReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.labels_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.annotations_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.logs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogReq::~LogReq() {
  // @@protoc_insertion_point(destructor:tglog_v3.LogReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void LogReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.labels_.Destruct();
  _impl_.labels_.~MapField();
  _impl_.annotations_.Destruct();
  _impl_.annotations_.~MapField();
  _impl_.logs_.~RepeatedPtrField();
}

void LogReq::ArenaDtor(void* object) {
  LogReq* _this = reinterpret_cast< LogReq* >(object);
  _this->_impl_.labels_.Destruct();
  _this->_impl_.annotations_.Destruct();
}
void LogReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogReq::Clear() {
// @@protoc_insertion_point(message_clear_start:tglog_v3.LogReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.labels_.Clear();
  _impl_.annotations_.Clear();
  _impl_.logs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.annotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tglog_v3.Log logs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tglog_v3.LogReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> labels = 1;
  if (!this->_internal_labels().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = LogReq_LabelsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_labels();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tglog_v3.LogReq.LabelsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tglog_v3.LogReq.LabelsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> annotations = 2;
  if (!this->_internal_annotations().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = LogReq_AnnotationsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_annotations();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tglog_v3.LogReq.AnnotationsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tglog_v3.LogReq.AnnotationsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .tglog_v3.Log logs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logs_size()); i < n; i++) {
    const auto& repfield = this->_internal_logs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tglog_v3.LogReq)
  return target;
}

size_t LogReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tglog_v3.LogReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += LogReq_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> annotations = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_annotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_annotations().begin();
      it != this->_internal_annotations().end(); ++it) {
    total_size += LogReq_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .tglog_v3.Log logs = 3;
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->_impl_.logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogReq::GetClassData() const { return &_class_data_; }


void LogReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogReq*>(&to_msg);
  auto& from = static_cast<const LogReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tglog_v3.LogReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  _this->_impl_.annotations_.MergeFrom(from._impl_.annotations_);
  _this->_impl_.logs_.MergeFrom(from._impl_.logs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogReq::CopyFrom(const LogReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tglog_v3.LogReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogReq::IsInitialized() const {
  return true;
}

void LogReq::InternalSwap(LogReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
  _impl_.annotations_.InternalSwap(&other->_impl_.annotations_);
  _impl_.logs_.InternalSwap(&other->_impl_.logs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tglog_5fv3_2eproto_getter, &descriptor_table_tglog_5fv3_2eproto_once,
      file_level_metadata_tglog_5fv3_2eproto[7]);
}

// ===================================================================

class LogRsp::_Internal {
 public:
};

LogRsp::LogRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tglog_v3.LogRsp)
}
LogRsp::LogRsp(const LogRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.seqs_){from._impl_.seqs_}
    , /*decltype(_impl_._seqs_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tglog_v3.LogRsp)
}

inline void LogRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.seqs_){arena}
    , /*decltype(_impl_._seqs_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogRsp::~LogRsp() {
  // @@protoc_insertion_point(destructor:tglog_v3.LogRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.seqs_.~RepeatedField();
}

void LogRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:tglog_v3.LogRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.seqs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 seqs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_seqs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_seqs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tglog_v3.LogRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 seqs = 1;
  {
    int byte_size = _impl_._seqs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_seqs(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tglog_v3.LogRsp)
  return target;
}

size_t LogRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tglog_v3.LogRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 seqs = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.seqs_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._seqs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogRsp::GetClassData() const { return &_class_data_; }


void LogRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogRsp*>(&to_msg);
  auto& from = static_cast<const LogRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tglog_v3.LogRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.seqs_.MergeFrom(from._impl_.seqs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogRsp::CopyFrom(const LogRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tglog_v3.LogRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRsp::IsInitialized() const {
  return true;
}

void LogRsp::InternalSwap(LogRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.seqs_.InternalSwap(&other->_impl_.seqs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tglog_5fv3_2eproto_getter, &descriptor_table_tglog_5fv3_2eproto_once,
      file_level_metadata_tglog_5fv3_2eproto[8]);
}

// ===================================================================

class HeartbeatReq::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ping(const HeartbeatReq* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
HeartbeatReq::_Internal::ping(const HeartbeatReq* msg) {
  return *msg->_impl_.ping_;
}
void HeartbeatReq::clear_ping() {
  if (GetArenaForAllocation() == nullptr && _impl_.ping_ != nullptr) {
    delete _impl_.ping_;
  }
  _impl_.ping_ = nullptr;
}
HeartbeatReq::HeartbeatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tglog_v3.HeartbeatReq)
}
HeartbeatReq::HeartbeatReq(const HeartbeatReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartbeatReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ping_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ping()) {
    _this->_impl_.ping_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ping_);
  }
  // @@protoc_insertion_point(copy_constructor:tglog_v3.HeartbeatReq)
}

inline void HeartbeatReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ping_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeartbeatReq::~HeartbeatReq() {
  // @@protoc_insertion_point(destructor:tglog_v3.HeartbeatReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartbeatReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ping_;
}

void HeartbeatReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartbeatReq::Clear() {
// @@protoc_insertion_point(message_clear_start:tglog_v3.HeartbeatReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.ping_ != nullptr) {
    delete _impl_.ping_;
  }
  _impl_.ping_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp ping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartbeatReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tglog_v3.HeartbeatReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp ping = 1;
  if (this->_internal_has_ping()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ping(this),
        _Internal::ping(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tglog_v3.HeartbeatReq)
  return target;
}

size_t HeartbeatReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tglog_v3.HeartbeatReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp ping = 1;
  if (this->_internal_has_ping()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ping_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartbeatReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatReq::GetClassData() const { return &_class_data_; }


void HeartbeatReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartbeatReq*>(&to_msg);
  auto& from = static_cast<const HeartbeatReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tglog_v3.HeartbeatReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ping()) {
    _this->_internal_mutable_ping()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ping());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatReq::CopyFrom(const HeartbeatReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tglog_v3.HeartbeatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatReq::IsInitialized() const {
  return true;
}

void HeartbeatReq::InternalSwap(HeartbeatReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ping_, other->_impl_.ping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tglog_5fv3_2eproto_getter, &descriptor_table_tglog_5fv3_2eproto_once,
      file_level_metadata_tglog_5fv3_2eproto[9]);
}

// ===================================================================

class HeartbeatRsp::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& pong(const HeartbeatRsp* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
HeartbeatRsp::_Internal::pong(const HeartbeatRsp* msg) {
  return *msg->_impl_.pong_;
}
void HeartbeatRsp::clear_pong() {
  if (GetArenaForAllocation() == nullptr && _impl_.pong_ != nullptr) {
    delete _impl_.pong_;
  }
  _impl_.pong_ = nullptr;
}
HeartbeatRsp::HeartbeatRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tglog_v3.HeartbeatRsp)
}
HeartbeatRsp::HeartbeatRsp(const HeartbeatRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartbeatRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pong_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pong()) {
    _this->_impl_.pong_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.pong_);
  }
  // @@protoc_insertion_point(copy_constructor:tglog_v3.HeartbeatRsp)
}

inline void HeartbeatRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pong_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeartbeatRsp::~HeartbeatRsp() {
  // @@protoc_insertion_point(destructor:tglog_v3.HeartbeatRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartbeatRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pong_;
}

void HeartbeatRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartbeatRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:tglog_v3.HeartbeatRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pong_ != nullptr) {
    delete _impl_.pong_;
  }
  _impl_.pong_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp pong = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartbeatRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tglog_v3.HeartbeatRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp pong = 1;
  if (this->_internal_has_pong()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pong(this),
        _Internal::pong(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tglog_v3.HeartbeatRsp)
  return target;
}

size_t HeartbeatRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tglog_v3.HeartbeatRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp pong = 1;
  if (this->_internal_has_pong()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pong_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartbeatRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatRsp::GetClassData() const { return &_class_data_; }


void HeartbeatRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartbeatRsp*>(&to_msg);
  auto& from = static_cast<const HeartbeatRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tglog_v3.HeartbeatRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pong()) {
    _this->_internal_mutable_pong()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_pong());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatRsp::CopyFrom(const HeartbeatRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tglog_v3.HeartbeatRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRsp::IsInitialized() const {
  return true;
}

void HeartbeatRsp::InternalSwap(HeartbeatRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pong_, other->_impl_.pong_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tglog_5fv3_2eproto_getter, &descriptor_table_tglog_5fv3_2eproto_once,
      file_level_metadata_tglog_5fv3_2eproto[10]);
}

// ===================================================================

class ReqHeader::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts(const ReqHeader* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ReqHeader::_Internal::ts(const ReqHeader* msg) {
  return *msg->_impl_.ts_;
}
void ReqHeader::clear_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.ts_ != nullptr) {
    delete _impl_.ts_;
  }
  _impl_.ts_ = nullptr;
}
ReqHeader::ReqHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tglog_v3.ReqHeader)
}
ReqHeader::ReqHeader(const ReqHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReqHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.appid_){}
    , decltype(_impl_.appname_){}
    , decltype(_impl_.appver_){}
    , decltype(_impl_.sdklang_){}
    , decltype(_impl_.sdkver_){}
    , decltype(_impl_.sdkos_){}
    , decltype(_impl_.network_){}
    , decltype(_impl_.protover_){}
    , decltype(_impl_.hostip_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.tokentype_){}
    , decltype(_impl_.sig_){}
    , decltype(_impl_.ts_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appid().empty()) {
    _this->_impl_.appid_.Set(from._internal_appid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.appname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appname().empty()) {
    _this->_impl_.appname_.Set(from._internal_appname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.appver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appver().empty()) {
    _this->_impl_.appver_.Set(from._internal_appver(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sdklang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdklang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdklang().empty()) {
    _this->_impl_.sdklang_.Set(from._internal_sdklang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sdkver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdkver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdkver().empty()) {
    _this->_impl_.sdkver_.Set(from._internal_sdkver(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sdkos_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdkos_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdkos().empty()) {
    _this->_impl_.sdkos_.Set(from._internal_sdkos(), 
      _this->GetArenaForAllocation());
  }
  _impl_.network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_network().empty()) {
    _this->_impl_.network_.Set(from._internal_network(), 
      _this->GetArenaForAllocation());
  }
  _impl_.protover_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protover_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protover().empty()) {
    _this->_impl_.protover_.Set(from._internal_protover(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostip().empty()) {
    _this->_impl_.hostip_.Set(from._internal_hostip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tokentype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tokentype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tokentype().empty()) {
    _this->_impl_.tokentype_.Set(from._internal_tokentype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sig_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sig().empty()) {
    _this->_impl_.sig_.Set(from._internal_sig(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ts()) {
    _this->_impl_.ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_);
  }
  // @@protoc_insertion_point(copy_constructor:tglog_v3.ReqHeader)
}

inline void ReqHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.appid_){}
    , decltype(_impl_.appname_){}
    , decltype(_impl_.appver_){}
    , decltype(_impl_.sdklang_){}
    , decltype(_impl_.sdkver_){}
    , decltype(_impl_.sdkos_){}
    , decltype(_impl_.network_){}
    , decltype(_impl_.protover_){}
    , decltype(_impl_.hostip_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.tokentype_){}
    , decltype(_impl_.sig_){}
    , decltype(_impl_.ts_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.appname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.appver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdklang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdklang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdkver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdkver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdkos_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdkos_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.protover_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protover_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tokentype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tokentype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sig_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReqHeader::~ReqHeader() {
  // @@protoc_insertion_point(destructor:tglog_v3.ReqHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.appid_.Destroy();
  _impl_.appname_.Destroy();
  _impl_.appver_.Destroy();
  _impl_.sdklang_.Destroy();
  _impl_.sdkver_.Destroy();
  _impl_.sdkos_.Destroy();
  _impl_.network_.Destroy();
  _impl_.protover_.Destroy();
  _impl_.hostip_.Destroy();
  _impl_.token_.Destroy();
  _impl_.tokentype_.Destroy();
  _impl_.sig_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ts_;
}

void ReqHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReqHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:tglog_v3.ReqHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.appid_.ClearToEmpty();
  _impl_.appname_.ClearToEmpty();
  _impl_.appver_.ClearToEmpty();
  _impl_.sdklang_.ClearToEmpty();
  _impl_.sdkver_.ClearToEmpty();
  _impl_.sdkos_.ClearToEmpty();
  _impl_.network_.ClearToEmpty();
  _impl_.protover_.ClearToEmpty();
  _impl_.hostip_.ClearToEmpty();
  _impl_.token_.ClearToEmpty();
  _impl_.tokentype_.ClearToEmpty();
  _impl_.sig_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ts_ != nullptr) {
    delete _impl_.ts_;
  }
  _impl_.ts_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string appID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_appid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tglog_v3.ReqHeader.appID"));
        } else
          goto handle_unusual;
        continue;
      // string appName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_appname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tglog_v3.ReqHeader.appName"));
        } else
          goto handle_unusual;
        continue;
      // string appVer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_appver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tglog_v3.ReqHeader.appVer"));
        } else
          goto handle_unusual;
        continue;
      // string sdkLang = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sdklang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tglog_v3.ReqHeader.sdkLang"));
        } else
          goto handle_unusual;
        continue;
      // string sdkVer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sdkver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tglog_v3.ReqHeader.sdkVer"));
        } else
          goto handle_unusual;
        continue;
      // string sdkOS = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sdkos();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tglog_v3.ReqHeader.sdkOS"));
        } else
          goto handle_unusual;
        continue;
      // string network = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_network();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tglog_v3.ReqHeader.network"));
        } else
          goto handle_unusual;
        continue;
      // string protoVer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_protover();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tglog_v3.ReqHeader.protoVer"));
        } else
          goto handle_unusual;
        continue;
      // string hostIP = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_hostip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tglog_v3.ReqHeader.hostIP"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string token = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tglog_v3.ReqHeader.token"));
        } else
          goto handle_unusual;
        continue;
      // string tokenType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_tokentype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tglog_v3.ReqHeader.tokenType"));
        } else
          goto handle_unusual;
        continue;
      // string sig = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_sig();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tglog_v3.ReqHeader.sig"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tglog_v3.ReqHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string appID = 1;
  if (!this->_internal_appid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appid().data(), static_cast<int>(this->_internal_appid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tglog_v3.ReqHeader.appID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_appid(), target);
  }

  // string appName = 2;
  if (!this->_internal_appname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appname().data(), static_cast<int>(this->_internal_appname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tglog_v3.ReqHeader.appName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_appname(), target);
  }

  // string appVer = 3;
  if (!this->_internal_appver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appver().data(), static_cast<int>(this->_internal_appver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tglog_v3.ReqHeader.appVer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_appver(), target);
  }

  // string sdkLang = 4;
  if (!this->_internal_sdklang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdklang().data(), static_cast<int>(this->_internal_sdklang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tglog_v3.ReqHeader.sdkLang");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sdklang(), target);
  }

  // string sdkVer = 5;
  if (!this->_internal_sdkver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdkver().data(), static_cast<int>(this->_internal_sdkver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tglog_v3.ReqHeader.sdkVer");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sdkver(), target);
  }

  // string sdkOS = 6;
  if (!this->_internal_sdkos().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdkos().data(), static_cast<int>(this->_internal_sdkos().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tglog_v3.ReqHeader.sdkOS");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sdkos(), target);
  }

  // string network = 7;
  if (!this->_internal_network().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network().data(), static_cast<int>(this->_internal_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tglog_v3.ReqHeader.network");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_network(), target);
  }

  // string protoVer = 8;
  if (!this->_internal_protover().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protover().data(), static_cast<int>(this->_internal_protover().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tglog_v3.ReqHeader.protoVer");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_protover(), target);
  }

  // string hostIP = 9;
  if (!this->_internal_hostip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostip().data(), static_cast<int>(this->_internal_hostip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tglog_v3.ReqHeader.hostIP");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_hostip(), target);
  }

  // .google.protobuf.Timestamp ts = 10;
  if (this->_internal_has_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::ts(this),
        _Internal::ts(this).GetCachedSize(), target, stream);
  }

  // string token = 11;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tglog_v3.ReqHeader.token");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_token(), target);
  }

  // string tokenType = 12;
  if (!this->_internal_tokentype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tokentype().data(), static_cast<int>(this->_internal_tokentype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tglog_v3.ReqHeader.tokenType");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_tokentype(), target);
  }

  // string sig = 13;
  if (!this->_internal_sig().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sig().data(), static_cast<int>(this->_internal_sig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tglog_v3.ReqHeader.sig");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_sig(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tglog_v3.ReqHeader)
  return target;
}

size_t ReqHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tglog_v3.ReqHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string appID = 1;
  if (!this->_internal_appid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appid());
  }

  // string appName = 2;
  if (!this->_internal_appname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appname());
  }

  // string appVer = 3;
  if (!this->_internal_appver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appver());
  }

  // string sdkLang = 4;
  if (!this->_internal_sdklang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdklang());
  }

  // string sdkVer = 5;
  if (!this->_internal_sdkver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdkver());
  }

  // string sdkOS = 6;
  if (!this->_internal_sdkos().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdkos());
  }

  // string network = 7;
  if (!this->_internal_network().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network());
  }

  // string protoVer = 8;
  if (!this->_internal_protover().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protover());
  }

  // string hostIP = 9;
  if (!this->_internal_hostip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostip());
  }

  // string token = 11;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string tokenType = 12;
  if (!this->_internal_tokentype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tokentype());
  }

  // string sig = 13;
  if (!this->_internal_sig().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sig());
  }

  // .google.protobuf.Timestamp ts = 10;
  if (this->_internal_has_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReqHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqHeader::GetClassData() const { return &_class_data_; }


void ReqHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReqHeader*>(&to_msg);
  auto& from = static_cast<const ReqHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tglog_v3.ReqHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_appid().empty()) {
    _this->_internal_set_appid(from._internal_appid());
  }
  if (!from._internal_appname().empty()) {
    _this->_internal_set_appname(from._internal_appname());
  }
  if (!from._internal_appver().empty()) {
    _this->_internal_set_appver(from._internal_appver());
  }
  if (!from._internal_sdklang().empty()) {
    _this->_internal_set_sdklang(from._internal_sdklang());
  }
  if (!from._internal_sdkver().empty()) {
    _this->_internal_set_sdkver(from._internal_sdkver());
  }
  if (!from._internal_sdkos().empty()) {
    _this->_internal_set_sdkos(from._internal_sdkos());
  }
  if (!from._internal_network().empty()) {
    _this->_internal_set_network(from._internal_network());
  }
  if (!from._internal_protover().empty()) {
    _this->_internal_set_protover(from._internal_protover());
  }
  if (!from._internal_hostip().empty()) {
    _this->_internal_set_hostip(from._internal_hostip());
  }
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_tokentype().empty()) {
    _this->_internal_set_tokentype(from._internal_tokentype());
  }
  if (!from._internal_sig().empty()) {
    _this->_internal_set_sig(from._internal_sig());
  }
  if (from._internal_has_ts()) {
    _this->_internal_mutable_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ts());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqHeader::CopyFrom(const ReqHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tglog_v3.ReqHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHeader::IsInitialized() const {
  return true;
}

void ReqHeader::InternalSwap(ReqHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appid_, lhs_arena,
      &other->_impl_.appid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appname_, lhs_arena,
      &other->_impl_.appname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appver_, lhs_arena,
      &other->_impl_.appver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdklang_, lhs_arena,
      &other->_impl_.sdklang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdkver_, lhs_arena,
      &other->_impl_.sdkver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdkos_, lhs_arena,
      &other->_impl_.sdkos_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.network_, lhs_arena,
      &other->_impl_.network_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protover_, lhs_arena,
      &other->_impl_.protover_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostip_, lhs_arena,
      &other->_impl_.hostip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tokentype_, lhs_arena,
      &other->_impl_.tokentype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sig_, lhs_arena,
      &other->_impl_.sig_, rhs_arena
  );
  swap(_impl_.ts_, other->_impl_.ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tglog_5fv3_2eproto_getter, &descriptor_table_tglog_5fv3_2eproto_once,
      file_level_metadata_tglog_5fv3_2eproto[11]);
}

// ===================================================================

class Req::_Internal {
 public:
  static const ::tglog_v3::AuthReq& authreq(const Req* msg);
  static const ::tglog_v3::LogReq& logreq(const Req* msg);
  static const ::tglog_v3::HeartbeatReq& heartbeatreq(const Req* msg);
};

const ::tglog_v3::AuthReq&
Req::_Internal::authreq(const Req* msg) {
  return *msg->_impl_.req_.authreq_;
}
const ::tglog_v3::LogReq&
Req::_Internal::logreq(const Req* msg) {
  return *msg->_impl_.req_.logreq_;
}
const ::tglog_v3::HeartbeatReq&
Req::_Internal::heartbeatreq(const Req* msg) {
  return *msg->_impl_.req_.heartbeatreq_;
}
void Req::set_allocated_authreq(::tglog_v3::AuthReq* authreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_req();
  if (authreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(authreq);
    if (message_arena != submessage_arena) {
      authreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authreq, submessage_arena);
    }
    set_has_authreq();
    _impl_.req_.authreq_ = authreq;
  }
  // @@protoc_insertion_point(field_set_allocated:tglog_v3.Req.authReq)
}
void Req::set_allocated_logreq(::tglog_v3::LogReq* logreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_req();
  if (logreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(logreq);
    if (message_arena != submessage_arena) {
      logreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logreq, submessage_arena);
    }
    set_has_logreq();
    _impl_.req_.logreq_ = logreq;
  }
  // @@protoc_insertion_point(field_set_allocated:tglog_v3.Req.logReq)
}
void Req::set_allocated_heartbeatreq(::tglog_v3::HeartbeatReq* heartbeatreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_req();
  if (heartbeatreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(heartbeatreq);
    if (message_arena != submessage_arena) {
      heartbeatreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeatreq, submessage_arena);
    }
    set_has_heartbeatreq();
    _impl_.req_.heartbeatreq_ = heartbeatreq;
  }
  // @@protoc_insertion_point(field_set_allocated:tglog_v3.Req.heartbeatReq)
}
Req::Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tglog_v3.Req)
}
Req::Req(const Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Req* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reqid_){}
    , decltype(_impl_.appmetadata_){}
    , decltype(_impl_.req_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reqid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reqid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reqid().empty()) {
    _this->_impl_.reqid_.Set(from._internal_reqid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.appmetadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appmetadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appmetadata().empty()) {
    _this->_impl_.appmetadata_.Set(from._internal_appmetadata(), 
      _this->GetArenaForAllocation());
  }
  clear_has_req();
  switch (from.req_case()) {
    case kAuthReq: {
      _this->_internal_mutable_authreq()->::tglog_v3::AuthReq::MergeFrom(
          from._internal_authreq());
      break;
    }
    case kLogReq: {
      _this->_internal_mutable_logreq()->::tglog_v3::LogReq::MergeFrom(
          from._internal_logreq());
      break;
    }
    case kHeartbeatReq: {
      _this->_internal_mutable_heartbeatreq()->::tglog_v3::HeartbeatReq::MergeFrom(
          from._internal_heartbeatreq());
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tglog_v3.Req)
}

inline void Req::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reqid_){}
    , decltype(_impl_.appmetadata_){}
    , decltype(_impl_.req_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.reqid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reqid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.appmetadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appmetadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_req();
}

Req::~Req() {
  // @@protoc_insertion_point(destructor:tglog_v3.Req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reqid_.Destroy();
  _impl_.appmetadata_.Destroy();
  if (has_req()) {
    clear_req();
  }
}

void Req::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Req::clear_req() {
// @@protoc_insertion_point(one_of_clear_start:tglog_v3.Req)
  switch (req_case()) {
    case kAuthReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.req_.authreq_;
      }
      break;
    }
    case kLogReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.req_.logreq_;
      }
      break;
    }
    case kHeartbeatReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.req_.heartbeatreq_;
      }
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQ_NOT_SET;
}


void Req::Clear() {
// @@protoc_insertion_point(message_clear_start:tglog_v3.Req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reqid_.ClearToEmpty();
  _impl_.appmetadata_.ClearToEmpty();
  clear_req();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string reqID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reqid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tglog_v3.Req.reqID"));
        } else
          goto handle_unusual;
        continue;
      // bytes appMetaData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_appmetadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tglog_v3.AuthReq authReq = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_authreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tglog_v3.LogReq logReq = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_logreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tglog_v3.HeartbeatReq heartbeatReq = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeatreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tglog_v3.Req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string reqID = 1;
  if (!this->_internal_reqid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reqid().data(), static_cast<int>(this->_internal_reqid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tglog_v3.Req.reqID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reqid(), target);
  }

  // bytes appMetaData = 2;
  if (!this->_internal_appmetadata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_appmetadata(), target);
  }

  // .tglog_v3.AuthReq authReq = 11;
  if (_internal_has_authreq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::authreq(this),
        _Internal::authreq(this).GetCachedSize(), target, stream);
  }

  // .tglog_v3.LogReq logReq = 12;
  if (_internal_has_logreq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::logreq(this),
        _Internal::logreq(this).GetCachedSize(), target, stream);
  }

  // .tglog_v3.HeartbeatReq heartbeatReq = 13;
  if (_internal_has_heartbeatreq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::heartbeatreq(this),
        _Internal::heartbeatreq(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tglog_v3.Req)
  return target;
}

size_t Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tglog_v3.Req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reqID = 1;
  if (!this->_internal_reqid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reqid());
  }

  // bytes appMetaData = 2;
  if (!this->_internal_appmetadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_appmetadata());
  }

  switch (req_case()) {
    // .tglog_v3.AuthReq authReq = 11;
    case kAuthReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.req_.authreq_);
      break;
    }
    // .tglog_v3.LogReq logReq = 12;
    case kLogReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.req_.logreq_);
      break;
    }
    // .tglog_v3.HeartbeatReq heartbeatReq = 13;
    case kHeartbeatReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.req_.heartbeatreq_);
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Req::GetClassData() const { return &_class_data_; }


void Req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Req*>(&to_msg);
  auto& from = static_cast<const Req&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tglog_v3.Req)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reqid().empty()) {
    _this->_internal_set_reqid(from._internal_reqid());
  }
  if (!from._internal_appmetadata().empty()) {
    _this->_internal_set_appmetadata(from._internal_appmetadata());
  }
  switch (from.req_case()) {
    case kAuthReq: {
      _this->_internal_mutable_authreq()->::tglog_v3::AuthReq::MergeFrom(
          from._internal_authreq());
      break;
    }
    case kLogReq: {
      _this->_internal_mutable_logreq()->::tglog_v3::LogReq::MergeFrom(
          from._internal_logreq());
      break;
    }
    case kHeartbeatReq: {
      _this->_internal_mutable_heartbeatreq()->::tglog_v3::HeartbeatReq::MergeFrom(
          from._internal_heartbeatreq());
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Req::CopyFrom(const Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tglog_v3.Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req::IsInitialized() const {
  return true;
}

void Req::InternalSwap(Req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reqid_, lhs_arena,
      &other->_impl_.reqid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appmetadata_, lhs_arena,
      &other->_impl_.appmetadata_, rhs_arena
  );
  swap(_impl_.req_, other->_impl_.req_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tglog_5fv3_2eproto_getter, &descriptor_table_tglog_5fv3_2eproto_once,
      file_level_metadata_tglog_5fv3_2eproto[12]);
}

// ===================================================================

class RspHeader::_Internal {
 public:
};

RspHeader::RspHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tglog_v3.RspHeader)
}
RspHeader::RspHeader(const RspHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RspHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.reqid_){}
    , decltype(_impl_.appmetadata_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reqid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reqid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reqid().empty()) {
    _this->_impl_.reqid_.Set(from._internal_reqid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.appmetadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appmetadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appmetadata().empty()) {
    _this->_impl_.appmetadata_.Set(from._internal_appmetadata(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:tglog_v3.RspHeader)
}

inline void RspHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.reqid_){}
    , decltype(_impl_.appmetadata_){}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reqid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reqid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.appmetadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appmetadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RspHeader::~RspHeader() {
  // @@protoc_insertion_point(destructor:tglog_v3.RspHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RspHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  _impl_.reqid_.Destroy();
  _impl_.appmetadata_.Destroy();
}

void RspHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RspHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:tglog_v3.RspHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.reqid_.ClearToEmpty();
  _impl_.appmetadata_.ClearToEmpty();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RspHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tglog_v3.RspHeader.msg"));
        } else
          goto handle_unusual;
        continue;
      // string reqID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_reqid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tglog_v3.RspHeader.reqID"));
        } else
          goto handle_unusual;
        continue;
      // bytes appMetaData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_appmetadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RspHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tglog_v3.RspHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tglog_v3.RspHeader.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // string reqID = 3;
  if (!this->_internal_reqid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reqid().data(), static_cast<int>(this->_internal_reqid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tglog_v3.RspHeader.reqID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reqid(), target);
  }

  // bytes appMetaData = 4;
  if (!this->_internal_appmetadata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_appmetadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tglog_v3.RspHeader)
  return target;
}

size_t RspHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tglog_v3.RspHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string reqID = 3;
  if (!this->_internal_reqid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reqid());
  }

  // bytes appMetaData = 4;
  if (!this->_internal_appmetadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_appmetadata());
  }

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RspHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RspHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RspHeader::GetClassData() const { return &_class_data_; }


void RspHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RspHeader*>(&to_msg);
  auto& from = static_cast<const RspHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tglog_v3.RspHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (!from._internal_reqid().empty()) {
    _this->_internal_set_reqid(from._internal_reqid());
  }
  if (!from._internal_appmetadata().empty()) {
    _this->_internal_set_appmetadata(from._internal_appmetadata());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RspHeader::CopyFrom(const RspHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tglog_v3.RspHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspHeader::IsInitialized() const {
  return true;
}

void RspHeader::InternalSwap(RspHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reqid_, lhs_arena,
      &other->_impl_.reqid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appmetadata_, lhs_arena,
      &other->_impl_.appmetadata_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RspHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tglog_5fv3_2eproto_getter, &descriptor_table_tglog_5fv3_2eproto_once,
      file_level_metadata_tglog_5fv3_2eproto[13]);
}

// ===================================================================

class Rsp::_Internal {
 public:
  static const ::tglog_v3::RspHeader& header(const Rsp* msg);
  static const ::tglog_v3::AuthRsp& authrsp(const Rsp* msg);
  static const ::tglog_v3::LogRsp& logrsp(const Rsp* msg);
  static const ::tglog_v3::HeartbeatRsp& heartbeatrsp(const Rsp* msg);
};

const ::tglog_v3::RspHeader&
Rsp::_Internal::header(const Rsp* msg) {
  return *msg->_impl_.header_;
}
const ::tglog_v3::AuthRsp&
Rsp::_Internal::authrsp(const Rsp* msg) {
  return *msg->_impl_.rsp_.authrsp_;
}
const ::tglog_v3::LogRsp&
Rsp::_Internal::logrsp(const Rsp* msg) {
  return *msg->_impl_.rsp_.logrsp_;
}
const ::tglog_v3::HeartbeatRsp&
Rsp::_Internal::heartbeatrsp(const Rsp* msg) {
  return *msg->_impl_.rsp_.heartbeatrsp_;
}
void Rsp::set_allocated_authrsp(::tglog_v3::AuthRsp* authrsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rsp();
  if (authrsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(authrsp);
    if (message_arena != submessage_arena) {
      authrsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authrsp, submessage_arena);
    }
    set_has_authrsp();
    _impl_.rsp_.authrsp_ = authrsp;
  }
  // @@protoc_insertion_point(field_set_allocated:tglog_v3.Rsp.authRsp)
}
void Rsp::set_allocated_logrsp(::tglog_v3::LogRsp* logrsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rsp();
  if (logrsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(logrsp);
    if (message_arena != submessage_arena) {
      logrsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logrsp, submessage_arena);
    }
    set_has_logrsp();
    _impl_.rsp_.logrsp_ = logrsp;
  }
  // @@protoc_insertion_point(field_set_allocated:tglog_v3.Rsp.logRsp)
}
void Rsp::set_allocated_heartbeatrsp(::tglog_v3::HeartbeatRsp* heartbeatrsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rsp();
  if (heartbeatrsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(heartbeatrsp);
    if (message_arena != submessage_arena) {
      heartbeatrsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeatrsp, submessage_arena);
    }
    set_has_heartbeatrsp();
    _impl_.rsp_.heartbeatrsp_ = heartbeatrsp;
  }
  // @@protoc_insertion_point(field_set_allocated:tglog_v3.Rsp.heartbeatRsp)
}
Rsp::Rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tglog_v3.Rsp)
}
Rsp::Rsp(const Rsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.rsp_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::tglog_v3::RspHeader(*from._impl_.header_);
  }
  clear_has_rsp();
  switch (from.rsp_case()) {
    case kAuthRsp: {
      _this->_internal_mutable_authrsp()->::tglog_v3::AuthRsp::MergeFrom(
          from._internal_authrsp());
      break;
    }
    case kLogRsp: {
      _this->_internal_mutable_logrsp()->::tglog_v3::LogRsp::MergeFrom(
          from._internal_logrsp());
      break;
    }
    case kHeartbeatRsp: {
      _this->_internal_mutable_heartbeatrsp()->::tglog_v3::HeartbeatRsp::MergeFrom(
          from._internal_heartbeatrsp());
      break;
    }
    case RSP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tglog_v3.Rsp)
}

inline void Rsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.rsp_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_rsp();
}

Rsp::~Rsp() {
  // @@protoc_insertion_point(destructor:tglog_v3.Rsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (has_rsp()) {
    clear_rsp();
  }
}

void Rsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rsp::clear_rsp() {
// @@protoc_insertion_point(one_of_clear_start:tglog_v3.Rsp)
  switch (rsp_case()) {
    case kAuthRsp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rsp_.authrsp_;
      }
      break;
    }
    case kLogRsp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rsp_.logrsp_;
      }
      break;
    }
    case kHeartbeatRsp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rsp_.heartbeatrsp_;
      }
      break;
    }
    case RSP_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RSP_NOT_SET;
}


void Rsp::Clear() {
// @@protoc_insertion_point(message_clear_start:tglog_v3.Rsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  clear_rsp();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tglog_v3.RspHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tglog_v3.AuthRsp authRsp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_authrsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tglog_v3.LogRsp logRsp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_logrsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tglog_v3.HeartbeatRsp heartbeatRsp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeatrsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tglog_v3.Rsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tglog_v3.RspHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .tglog_v3.AuthRsp authRsp = 11;
  if (_internal_has_authrsp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::authrsp(this),
        _Internal::authrsp(this).GetCachedSize(), target, stream);
  }

  // .tglog_v3.LogRsp logRsp = 12;
  if (_internal_has_logrsp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::logrsp(this),
        _Internal::logrsp(this).GetCachedSize(), target, stream);
  }

  // .tglog_v3.HeartbeatRsp heartbeatRsp = 13;
  if (_internal_has_heartbeatrsp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::heartbeatrsp(this),
        _Internal::heartbeatrsp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tglog_v3.Rsp)
  return target;
}

size_t Rsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tglog_v3.Rsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tglog_v3.RspHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  switch (rsp_case()) {
    // .tglog_v3.AuthRsp authRsp = 11;
    case kAuthRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rsp_.authrsp_);
      break;
    }
    // .tglog_v3.LogRsp logRsp = 12;
    case kLogRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rsp_.logrsp_);
      break;
    }
    // .tglog_v3.HeartbeatRsp heartbeatRsp = 13;
    case kHeartbeatRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rsp_.heartbeatrsp_);
      break;
    }
    case RSP_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rsp::GetClassData() const { return &_class_data_; }


void Rsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rsp*>(&to_msg);
  auto& from = static_cast<const Rsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tglog_v3.Rsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::tglog_v3::RspHeader::MergeFrom(
        from._internal_header());
  }
  switch (from.rsp_case()) {
    case kAuthRsp: {
      _this->_internal_mutable_authrsp()->::tglog_v3::AuthRsp::MergeFrom(
          from._internal_authrsp());
      break;
    }
    case kLogRsp: {
      _this->_internal_mutable_logrsp()->::tglog_v3::LogRsp::MergeFrom(
          from._internal_logrsp());
      break;
    }
    case kHeartbeatRsp: {
      _this->_internal_mutable_heartbeatrsp()->::tglog_v3::HeartbeatRsp::MergeFrom(
          from._internal_heartbeatrsp());
      break;
    }
    case RSP_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rsp::CopyFrom(const Rsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tglog_v3.Rsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp::IsInitialized() const {
  return true;
}

void Rsp::InternalSwap(Rsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.header_, other->_impl_.header_);
  swap(_impl_.rsp_, other->_impl_.rsp_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tglog_5fv3_2eproto_getter, &descriptor_table_tglog_5fv3_2eproto_once,
      file_level_metadata_tglog_5fv3_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tglog_v3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tglog_v3::Log*
Arena::CreateMaybeMessage< ::tglog_v3::Log >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tglog_v3::Log >(arena);
}
template<> PROTOBUF_NOINLINE ::tglog_v3::AuthReq_LabelsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tglog_v3::AuthReq_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tglog_v3::AuthReq_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tglog_v3::AuthReq_AnnotationsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tglog_v3::AuthReq_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tglog_v3::AuthReq_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tglog_v3::AuthReq*
Arena::CreateMaybeMessage< ::tglog_v3::AuthReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tglog_v3::AuthReq >(arena);
}
template<> PROTOBUF_NOINLINE ::tglog_v3::AuthRsp*
Arena::CreateMaybeMessage< ::tglog_v3::AuthRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tglog_v3::AuthRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::tglog_v3::LogReq_LabelsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tglog_v3::LogReq_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tglog_v3::LogReq_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tglog_v3::LogReq_AnnotationsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tglog_v3::LogReq_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tglog_v3::LogReq_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tglog_v3::LogReq*
Arena::CreateMaybeMessage< ::tglog_v3::LogReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tglog_v3::LogReq >(arena);
}
template<> PROTOBUF_NOINLINE ::tglog_v3::LogRsp*
Arena::CreateMaybeMessage< ::tglog_v3::LogRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tglog_v3::LogRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::tglog_v3::HeartbeatReq*
Arena::CreateMaybeMessage< ::tglog_v3::HeartbeatReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tglog_v3::HeartbeatReq >(arena);
}
template<> PROTOBUF_NOINLINE ::tglog_v3::HeartbeatRsp*
Arena::CreateMaybeMessage< ::tglog_v3::HeartbeatRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tglog_v3::HeartbeatRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::tglog_v3::ReqHeader*
Arena::CreateMaybeMessage< ::tglog_v3::ReqHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tglog_v3::ReqHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::tglog_v3::Req*
Arena::CreateMaybeMessage< ::tglog_v3::Req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tglog_v3::Req >(arena);
}
template<> PROTOBUF_NOINLINE ::tglog_v3::RspHeader*
Arena::CreateMaybeMessage< ::tglog_v3::RspHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tglog_v3::RspHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::tglog_v3::Rsp*
Arena::CreateMaybeMessage< ::tglog_v3::Rsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tglog_v3::Rsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
