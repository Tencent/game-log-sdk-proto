// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tglog_v3.proto

package pbgo

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//协议版本号
type ProtoVer int32

const (
	ProtoVer_VER_USELESS ProtoVer = 0
	ProtoVer_MAJOR       ProtoVer = 0
	ProtoVer_MINOR       ProtoVer = 2
	ProtoVer_PATCH       ProtoVer = 0
)

var ProtoVer_name = map[int32]string{
	0: "VER_USELESS",
	// Duplicate value: 0: "MAJOR",
	2: "MINOR",
	// Duplicate value: 0: "PATCH",
}

var ProtoVer_value = map[string]int32{
	"VER_USELESS": 0,
	"MAJOR":       0,
	"MINOR":       2,
	"PATCH":       0,
}

func (x ProtoVer) String() string {
	return proto.EnumName(ProtoVer_name, int32(x))
}

func (ProtoVer) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c333fabf7b38c397, []int{0}
}

//魔数
type Magic int32

const (
	Magic_MAGIC_USELESS Magic = 0
	Magic_VAL           Magic = 1537
)

var Magic_name = map[int32]string{
	0:    "MAGIC_USELESS",
	1537: "VAL",
}

var Magic_value = map[string]int32{
	"MAGIC_USELESS": 0,
	"VAL":           1537,
}

func (x Magic) String() string {
	return proto.EnumName(Magic_name, int32(x))
}

func (Magic) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c333fabf7b38c397, []int{1}
}

type Len int32

const (
	Len_LEN_USELESS Len = 0
	Len_MAGIC       Len = 2
	Len_PACKAGE     Len = 4
	Len_FLAGS       Len = 1
	Len_HEADER      Len = 2
	Len_RESERVE     Len = 1
)

var Len_name = map[int32]string{
	0: "LEN_USELESS",
	2: "MAGIC",
	4: "PACKAGE",
	1: "FLAGS",
	// Duplicate value: 2: "HEADER",
	// Duplicate value: 1: "RESERVE",
}

var Len_value = map[string]int32{
	"LEN_USELESS": 0,
	"MAGIC":       2,
	"PACKAGE":     4,
	"FLAGS":       1,
	"HEADER":      2,
	"RESERVE":     1,
}

func (x Len) String() string {
	return proto.EnumName(Len_name, int32(x))
}

func (Len) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c333fabf7b38c397, []int{2}
}

//最大值
type Max int32

const (
	Max_MAX_USELESS      Max = 0
	Max_LOG_COUNT        Max = 100
	Max_UDP_LOG_SIZE     Max = 64512
	Max_RAW_UDP_LOG_SIZE Max = 65507
	Max_TCP_LOG_SIZE     Max = 524288
)

var Max_name = map[int32]string{
	0:      "MAX_USELESS",
	100:    "LOG_COUNT",
	64512:  "UDP_LOG_SIZE",
	65507:  "RAW_UDP_LOG_SIZE",
	524288: "TCP_LOG_SIZE",
}

var Max_value = map[string]int32{
	"MAX_USELESS":      0,
	"LOG_COUNT":        100,
	"UDP_LOG_SIZE":     64512,
	"RAW_UDP_LOG_SIZE": 65507,
	"TCP_LOG_SIZE":     524288,
}

func (x Max) String() string {
	return proto.EnumName(Max_name, int32(x))
}

func (Max) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c333fabf7b38c397, []int{3}
}

//标记位
type Flag int32

const (
	Flag_FLAG_NONE              Flag = 0
	Flag_FLAG_COMPRESSED        Flag = 1
	Flag_FLAG_ENCRYPTED         Flag = 2
	Flag_FLAG_COMPRESSED_HEADER Flag = 4
	Flag_FLAG_ENCRYPTED_HEADER  Flag = 8
)

var Flag_name = map[int32]string{
	0: "FLAG_NONE",
	1: "FLAG_COMPRESSED",
	2: "FLAG_ENCRYPTED",
	4: "FLAG_COMPRESSED_HEADER",
	8: "FLAG_ENCRYPTED_HEADER",
}

var Flag_value = map[string]int32{
	"FLAG_NONE":              0,
	"FLAG_COMPRESSED":        1,
	"FLAG_ENCRYPTED":         2,
	"FLAG_COMPRESSED_HEADER": 4,
	"FLAG_ENCRYPTED_HEADER":  8,
}

func (x Flag) String() string {
	return proto.EnumName(Flag_name, int32(x))
}

func (Flag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c333fabf7b38c397, []int{4}
}

//单条日志
type Log struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Seq                  uint64   `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_c333fabf7b38c397, []int{0}
}
func (m *Log) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Log.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return m.Size()
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Log) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Log) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

//鉴权请求
type AuthReq struct {
	Labels               map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations          map[string]string `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AuthReq) Reset()         { *m = AuthReq{} }
func (m *AuthReq) String() string { return proto.CompactTextString(m) }
func (*AuthReq) ProtoMessage()    {}
func (*AuthReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c333fabf7b38c397, []int{1}
}
func (m *AuthReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthReq.Merge(m, src)
}
func (m *AuthReq) XXX_Size() int {
	return m.Size()
}
func (m *AuthReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthReq.DiscardUnknown(m)
}

var xxx_messageInfo_AuthReq proto.InternalMessageInfo

func (m *AuthReq) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *AuthReq) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

//鉴权响应
type AuthRsp struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthRsp) Reset()         { *m = AuthRsp{} }
func (m *AuthRsp) String() string { return proto.CompactTextString(m) }
func (*AuthRsp) ProtoMessage()    {}
func (*AuthRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c333fabf7b38c397, []int{2}
}
func (m *AuthRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthRsp.Merge(m, src)
}
func (m *AuthRsp) XXX_Size() int {
	return m.Size()
}
func (m *AuthRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AuthRsp proto.InternalMessageInfo

func (m *AuthRsp) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

//日志上报请求
type LogReq struct {
	Labels               map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations          map[string]string `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Logs                 []*Log            `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LogReq) Reset()         { *m = LogReq{} }
func (m *LogReq) String() string { return proto.CompactTextString(m) }
func (*LogReq) ProtoMessage()    {}
func (*LogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c333fabf7b38c397, []int{3}
}
func (m *LogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogReq.Merge(m, src)
}
func (m *LogReq) XXX_Size() int {
	return m.Size()
}
func (m *LogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LogReq.DiscardUnknown(m)
}

var xxx_messageInfo_LogReq proto.InternalMessageInfo

func (m *LogReq) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *LogReq) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *LogReq) GetLogs() []*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

//日志上报响应
type LogRsp struct {
	Seqs                 []uint64 `protobuf:"varint,1,rep,packed,name=seqs,proto3" json:"seqs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogRsp) Reset()         { *m = LogRsp{} }
func (m *LogRsp) String() string { return proto.CompactTextString(m) }
func (*LogRsp) ProtoMessage()    {}
func (*LogRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c333fabf7b38c397, []int{4}
}
func (m *LogRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRsp.Merge(m, src)
}
func (m *LogRsp) XXX_Size() int {
	return m.Size()
}
func (m *LogRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LogRsp proto.InternalMessageInfo

func (m *LogRsp) GetSeqs() []uint64 {
	if m != nil {
		return m.Seqs
	}
	return nil
}

//心跳请求
type HeartbeatReq struct {
	Ping                 *types.Timestamp `protobuf:"bytes,1,opt,name=ping,proto3" json:"ping,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *HeartbeatReq) Reset()         { *m = HeartbeatReq{} }
func (m *HeartbeatReq) String() string { return proto.CompactTextString(m) }
func (*HeartbeatReq) ProtoMessage()    {}
func (*HeartbeatReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c333fabf7b38c397, []int{5}
}
func (m *HeartbeatReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartbeatReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartbeatReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeartbeatReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatReq.Merge(m, src)
}
func (m *HeartbeatReq) XXX_Size() int {
	return m.Size()
}
func (m *HeartbeatReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatReq.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatReq proto.InternalMessageInfo

func (m *HeartbeatReq) GetPing() *types.Timestamp {
	if m != nil {
		return m.Ping
	}
	return nil
}

//心跳响应
type HeartbeatRsp struct {
	Pong                 *types.Timestamp `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *HeartbeatRsp) Reset()         { *m = HeartbeatRsp{} }
func (m *HeartbeatRsp) String() string { return proto.CompactTextString(m) }
func (*HeartbeatRsp) ProtoMessage()    {}
func (*HeartbeatRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c333fabf7b38c397, []int{6}
}
func (m *HeartbeatRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartbeatRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartbeatRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeartbeatRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatRsp.Merge(m, src)
}
func (m *HeartbeatRsp) XXX_Size() int {
	return m.Size()
}
func (m *HeartbeatRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatRsp.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatRsp proto.InternalMessageInfo

func (m *HeartbeatRsp) GetPong() *types.Timestamp {
	if m != nil {
		return m.Pong
	}
	return nil
}

//请求头
type ReqHeader struct {
	AppID                string           `protobuf:"bytes,1,opt,name=appID,proto3" json:"appID,omitempty"`
	AppName              string           `protobuf:"bytes,2,opt,name=appName,proto3" json:"appName,omitempty"`
	AppVer               string           `protobuf:"bytes,3,opt,name=appVer,proto3" json:"appVer,omitempty"`
	SdkLang              string           `protobuf:"bytes,4,opt,name=sdkLang,proto3" json:"sdkLang,omitempty"`
	SdkVer               string           `protobuf:"bytes,5,opt,name=sdkVer,proto3" json:"sdkVer,omitempty"`
	SdkOS                string           `protobuf:"bytes,6,opt,name=sdkOS,proto3" json:"sdkOS,omitempty"`
	Network              string           `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	ProtoVer             string           `protobuf:"bytes,8,opt,name=protoVer,proto3" json:"protoVer,omitempty"`
	HostIP               string           `protobuf:"bytes,9,opt,name=hostIP,proto3" json:"hostIP,omitempty"`
	Ts                   *types.Timestamp `protobuf:"bytes,10,opt,name=ts,proto3" json:"ts,omitempty"`
	Token                string           `protobuf:"bytes,11,opt,name=token,proto3" json:"token,omitempty"`
	TokenType            string           `protobuf:"bytes,12,opt,name=tokenType,proto3" json:"tokenType,omitempty"`
	Sig                  string           `protobuf:"bytes,13,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ReqHeader) Reset()         { *m = ReqHeader{} }
func (m *ReqHeader) String() string { return proto.CompactTextString(m) }
func (*ReqHeader) ProtoMessage()    {}
func (*ReqHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_c333fabf7b38c397, []int{7}
}
func (m *ReqHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqHeader.Merge(m, src)
}
func (m *ReqHeader) XXX_Size() int {
	return m.Size()
}
func (m *ReqHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ReqHeader proto.InternalMessageInfo

func (m *ReqHeader) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *ReqHeader) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *ReqHeader) GetAppVer() string {
	if m != nil {
		return m.AppVer
	}
	return ""
}

func (m *ReqHeader) GetSdkLang() string {
	if m != nil {
		return m.SdkLang
	}
	return ""
}

func (m *ReqHeader) GetSdkVer() string {
	if m != nil {
		return m.SdkVer
	}
	return ""
}

func (m *ReqHeader) GetSdkOS() string {
	if m != nil {
		return m.SdkOS
	}
	return ""
}

func (m *ReqHeader) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *ReqHeader) GetProtoVer() string {
	if m != nil {
		return m.ProtoVer
	}
	return ""
}

func (m *ReqHeader) GetHostIP() string {
	if m != nil {
		return m.HostIP
	}
	return ""
}

func (m *ReqHeader) GetTs() *types.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *ReqHeader) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ReqHeader) GetTokenType() string {
	if m != nil {
		return m.TokenType
	}
	return ""
}

func (m *ReqHeader) GetSig() string {
	if m != nil {
		return m.Sig
	}
	return ""
}

//请求
// 请求因为涉及到鉴权、签名，将请求头和请求包体分开，
// 客户端构造请求包体，压缩、加密、签名，再构造请求头，
// 服务器先解析请求头，鉴权、校验签名，再处理请求包体。
type Req struct {
	ReqID       string `protobuf:"bytes,1,opt,name=reqID,proto3" json:"reqID,omitempty"`
	AppMetaData []byte `protobuf:"bytes,2,opt,name=appMetaData,proto3" json:"appMetaData,omitempty"`
	// Types that are valid to be assigned to Req:
	//	*Req_AuthReq
	//	*Req_LogReq
	//	*Req_HeartbeatReq
	Req                  isReq_Req `protobuf_oneof:"req"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_c333fabf7b38c397, []int{8}
}
func (m *Req) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Req.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(m, src)
}
func (m *Req) XXX_Size() int {
	return m.Size()
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

type isReq_Req interface {
	isReq_Req()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Req_AuthReq struct {
	AuthReq *AuthReq `protobuf:"bytes,11,opt,name=authReq,proto3,oneof" json:"authReq,omitempty"`
}
type Req_LogReq struct {
	LogReq *LogReq `protobuf:"bytes,12,opt,name=logReq,proto3,oneof" json:"logReq,omitempty"`
}
type Req_HeartbeatReq struct {
	HeartbeatReq *HeartbeatReq `protobuf:"bytes,13,opt,name=heartbeatReq,proto3,oneof" json:"heartbeatReq,omitempty"`
}

func (*Req_AuthReq) isReq_Req()      {}
func (*Req_LogReq) isReq_Req()       {}
func (*Req_HeartbeatReq) isReq_Req() {}

func (m *Req) GetReq() isReq_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *Req) GetReqID() string {
	if m != nil {
		return m.ReqID
	}
	return ""
}

func (m *Req) GetAppMetaData() []byte {
	if m != nil {
		return m.AppMetaData
	}
	return nil
}

func (m *Req) GetAuthReq() *AuthReq {
	if x, ok := m.GetReq().(*Req_AuthReq); ok {
		return x.AuthReq
	}
	return nil
}

func (m *Req) GetLogReq() *LogReq {
	if x, ok := m.GetReq().(*Req_LogReq); ok {
		return x.LogReq
	}
	return nil
}

func (m *Req) GetHeartbeatReq() *HeartbeatReq {
	if x, ok := m.GetReq().(*Req_HeartbeatReq); ok {
		return x.HeartbeatReq
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Req) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Req_AuthReq)(nil),
		(*Req_LogReq)(nil),
		(*Req_HeartbeatReq)(nil),
	}
}

//响应头
type RspHeader struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	ReqID                string   `protobuf:"bytes,3,opt,name=reqID,proto3" json:"reqID,omitempty"`
	AppMetaData          []byte   `protobuf:"bytes,4,opt,name=appMetaData,proto3" json:"appMetaData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RspHeader) Reset()         { *m = RspHeader{} }
func (m *RspHeader) String() string { return proto.CompactTextString(m) }
func (*RspHeader) ProtoMessage()    {}
func (*RspHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_c333fabf7b38c397, []int{9}
}
func (m *RspHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RspHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RspHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RspHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspHeader.Merge(m, src)
}
func (m *RspHeader) XXX_Size() int {
	return m.Size()
}
func (m *RspHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_RspHeader.DiscardUnknown(m)
}

var xxx_messageInfo_RspHeader proto.InternalMessageInfo

func (m *RspHeader) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RspHeader) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RspHeader) GetReqID() string {
	if m != nil {
		return m.ReqID
	}
	return ""
}

func (m *RspHeader) GetAppMetaData() []byte {
	if m != nil {
		return m.AppMetaData
	}
	return nil
}

//响应
type Rsp struct {
	Header *RspHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Types that are valid to be assigned to Rsp:
	//	*Rsp_AuthRsp
	//	*Rsp_LogRsp
	//	*Rsp_HeartbeatRsp
	Rsp                  isRsp_Rsp `protobuf_oneof:"rsp"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Rsp) Reset()         { *m = Rsp{} }
func (m *Rsp) String() string { return proto.CompactTextString(m) }
func (*Rsp) ProtoMessage()    {}
func (*Rsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c333fabf7b38c397, []int{10}
}
func (m *Rsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rsp.Merge(m, src)
}
func (m *Rsp) XXX_Size() int {
	return m.Size()
}
func (m *Rsp) XXX_DiscardUnknown() {
	xxx_messageInfo_Rsp.DiscardUnknown(m)
}

var xxx_messageInfo_Rsp proto.InternalMessageInfo

type isRsp_Rsp interface {
	isRsp_Rsp()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Rsp_AuthRsp struct {
	AuthRsp *AuthRsp `protobuf:"bytes,11,opt,name=authRsp,proto3,oneof" json:"authRsp,omitempty"`
}
type Rsp_LogRsp struct {
	LogRsp *LogRsp `protobuf:"bytes,12,opt,name=logRsp,proto3,oneof" json:"logRsp,omitempty"`
}
type Rsp_HeartbeatRsp struct {
	HeartbeatRsp *HeartbeatRsp `protobuf:"bytes,13,opt,name=heartbeatRsp,proto3,oneof" json:"heartbeatRsp,omitempty"`
}

func (*Rsp_AuthRsp) isRsp_Rsp()      {}
func (*Rsp_LogRsp) isRsp_Rsp()       {}
func (*Rsp_HeartbeatRsp) isRsp_Rsp() {}

func (m *Rsp) GetRsp() isRsp_Rsp {
	if m != nil {
		return m.Rsp
	}
	return nil
}

func (m *Rsp) GetHeader() *RspHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Rsp) GetAuthRsp() *AuthRsp {
	if x, ok := m.GetRsp().(*Rsp_AuthRsp); ok {
		return x.AuthRsp
	}
	return nil
}

func (m *Rsp) GetLogRsp() *LogRsp {
	if x, ok := m.GetRsp().(*Rsp_LogRsp); ok {
		return x.LogRsp
	}
	return nil
}

func (m *Rsp) GetHeartbeatRsp() *HeartbeatRsp {
	if x, ok := m.GetRsp().(*Rsp_HeartbeatRsp); ok {
		return x.HeartbeatRsp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Rsp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Rsp_AuthRsp)(nil),
		(*Rsp_LogRsp)(nil),
		(*Rsp_HeartbeatRsp)(nil),
	}
}

func init() {
	proto.RegisterEnum("tglog_v3.ProtoVer", ProtoVer_name, ProtoVer_value)
	proto.RegisterEnum("tglog_v3.Magic", Magic_name, Magic_value)
	proto.RegisterEnum("tglog_v3.Len", Len_name, Len_value)
	proto.RegisterEnum("tglog_v3.Max", Max_name, Max_value)
	proto.RegisterEnum("tglog_v3.Flag", Flag_name, Flag_value)
	proto.RegisterType((*Log)(nil), "tglog_v3.Log")
	proto.RegisterType((*AuthReq)(nil), "tglog_v3.AuthReq")
	proto.RegisterMapType((map[string]string)(nil), "tglog_v3.AuthReq.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "tglog_v3.AuthReq.LabelsEntry")
	proto.RegisterType((*AuthRsp)(nil), "tglog_v3.AuthRsp")
	proto.RegisterType((*LogReq)(nil), "tglog_v3.LogReq")
	proto.RegisterMapType((map[string]string)(nil), "tglog_v3.LogReq.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "tglog_v3.LogReq.LabelsEntry")
	proto.RegisterType((*LogRsp)(nil), "tglog_v3.LogRsp")
	proto.RegisterType((*HeartbeatReq)(nil), "tglog_v3.HeartbeatReq")
	proto.RegisterType((*HeartbeatRsp)(nil), "tglog_v3.HeartbeatRsp")
	proto.RegisterType((*ReqHeader)(nil), "tglog_v3.ReqHeader")
	proto.RegisterType((*Req)(nil), "tglog_v3.Req")
	proto.RegisterType((*RspHeader)(nil), "tglog_v3.RspHeader")
	proto.RegisterType((*Rsp)(nil), "tglog_v3.Rsp")
}

func init() { proto.RegisterFile("tglog_v3.proto", fileDescriptor_c333fabf7b38c397) }

var fileDescriptor_c333fabf7b38c397 = []byte{
	// 1032 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4d, 0x6f, 0x23, 0x45,
	0x10, 0xf5, 0x7c, 0xd8, 0xb1, 0x6b, 0x9c, 0xdd, 0xd9, 0xde, 0x25, 0x1a, 0xac, 0x90, 0x64, 0x2d,
	0x0e, 0x91, 0x51, 0x1c, 0x29, 0x0b, 0x12, 0x20, 0xb4, 0x62, 0xd6, 0x9e, 0x8d, 0x0d, 0xfe, 0x52,
	0xdb, 0x09, 0xec, 0x5e, 0xac, 0x76, 0xdc, 0x4c, 0x8c, 0xed, 0x99, 0xb6, 0xbb, 0x13, 0xc8, 0x6d,
	0xf7, 0xa7, 0xf0, 0x6f, 0x38, 0x22, 0xae, 0x08, 0x09, 0x85, 0x3f, 0xc1, 0x0d, 0xd4, 0x3d, 0x33,
	0xf1, 0x47, 0x42, 0x80, 0x13, 0xb7, 0x7a, 0xd5, 0xef, 0x55, 0x55, 0x3f, 0x57, 0x8f, 0x0c, 0x0f,
	0x84, 0x3f, 0x09, 0xfd, 0xfe, 0xe5, 0xb3, 0x32, 0x9b, 0x87, 0x22, 0x44, 0xd9, 0x04, 0x17, 0x76,
	0xfd, 0x30, 0xf4, 0x27, 0xf4, 0x50, 0xe5, 0x07, 0x17, 0xdf, 0x1c, 0x8a, 0xd1, 0x94, 0x72, 0x41,
	0xa6, 0x2c, 0xa2, 0x16, 0x3d, 0x30, 0x1a, 0xa1, 0x8f, 0x10, 0x98, 0x01, 0x99, 0x52, 0x47, 0xdb,
	0xd3, 0xf6, 0x73, 0x58, 0xc5, 0xc8, 0x81, 0x8d, 0xb3, 0x30, 0x10, 0x34, 0x10, 0x8e, 0xae, 0xd2,
	0x09, 0x44, 0x36, 0x18, 0x9c, 0xce, 0x1c, 0x63, 0x4f, 0xdb, 0x37, 0xb1, 0x0c, 0x8b, 0x6f, 0x75,
	0xd8, 0x70, 0x2f, 0xc4, 0x39, 0xa6, 0x33, 0xf4, 0x11, 0x64, 0x26, 0x64, 0x40, 0x27, 0xdc, 0xd1,
	0xf6, 0x8c, 0x7d, 0xeb, 0xe8, 0xbd, 0xf2, 0xcd, 0x78, 0x31, 0xa5, 0xdc, 0x50, 0xe7, 0x5e, 0x20,
	0xe6, 0x57, 0x38, 0x26, 0xa3, 0x2a, 0x58, 0x24, 0x08, 0x42, 0x41, 0xc4, 0x28, 0x0c, 0xb8, 0xa3,
	0x2b, 0x6d, 0xf1, 0xb6, 0xd6, 0x5d, 0x90, 0xa2, 0x02, 0xcb, 0xb2, 0xc2, 0x27, 0x60, 0x2d, 0x15,
	0x97, 0x93, 0x8e, 0xe9, 0x55, 0x7c, 0x2d, 0x19, 0xa2, 0x27, 0x90, 0xbe, 0x24, 0x93, 0x0b, 0x1a,
	0xdf, 0x29, 0x02, 0x9f, 0xea, 0x1f, 0x6b, 0x85, 0xe7, 0x60, 0xaf, 0xd7, 0xfe, 0x2f, 0xfa, 0xe2,
	0x6e, 0x6c, 0x01, 0x67, 0x92, 0x24, 0xc2, 0x31, 0x0d, 0x62, 0x61, 0x04, 0x8a, 0x3f, 0xe8, 0x90,
	0x69, 0x84, 0xbe, 0xf4, 0xe8, 0xc3, 0x35, 0x8f, 0xb6, 0x17, 0xf7, 0x8c, 0x18, 0x77, 0x5a, 0x54,
	0xb9, 0xcb, 0xa2, 0xa7, 0xb7, 0xa4, 0xf7, 0x3a, 0x84, 0x9e, 0x82, 0x39, 0x09, 0x7d, 0xee, 0x18,
	0x4a, 0xbd, 0xb9, 0xaa, 0x56, 0x47, 0xff, 0xa7, 0x89, 0xdb, 0x91, 0x45, 0x9c, 0xc9, 0x95, 0xe4,
	0x74, 0x16, 0x19, 0x64, 0x62, 0x15, 0x17, 0x9f, 0x43, 0xbe, 0x46, 0xc9, 0x5c, 0x0c, 0x28, 0x11,
	0xd2, 0xc6, 0x32, 0x98, 0x6c, 0x14, 0xf8, 0xaa, 0xb4, 0x75, 0x54, 0x28, 0x47, 0xdb, 0x5e, 0x4e,
	0xb6, 0xbd, 0xdc, 0x4b, 0xb6, 0x1d, 0x2b, 0xde, 0xaa, 0x9e, 0x33, 0xa5, 0x0f, 0xff, 0xa5, 0x3e,
	0x0c, 0xfc, 0xe2, 0x2f, 0x3a, 0xe4, 0x30, 0x9d, 0xd5, 0x28, 0x19, 0xd2, 0xb9, 0xbc, 0x05, 0x61,
	0xac, 0x5e, 0x4d, 0x7e, 0x65, 0x05, 0xe4, 0xb3, 0x21, 0x8c, 0xb5, 0xe4, 0x6b, 0x8a, 0x9f, 0x4d,
	0x0c, 0xd1, 0x16, 0x64, 0x08, 0x63, 0xa7, 0x74, 0xae, 0x5e, 0x4e, 0x0e, 0xc7, 0x48, 0x2a, 0xf8,
	0x70, 0xdc, 0x20, 0x81, 0xef, 0x98, 0x91, 0x22, 0x86, 0x52, 0xc1, 0x87, 0x63, 0xa9, 0x48, 0x47,
	0x8a, 0x08, 0xc9, 0xce, 0x7c, 0x38, 0x6e, 0x77, 0x9d, 0x4c, 0xd4, 0x59, 0x01, 0x59, 0x27, 0xa0,
	0xe2, 0xbb, 0x70, 0x3e, 0x76, 0x36, 0xa2, 0x3a, 0x31, 0x44, 0x05, 0xc8, 0xaa, 0x3b, 0xc9, 0x4a,
	0x59, 0x75, 0x74, 0x83, 0x65, 0x8f, 0xf3, 0x90, 0x8b, 0x7a, 0xc7, 0xc9, 0x45, 0x3d, 0x22, 0x84,
	0x4a, 0xa0, 0x0b, 0xee, 0xc0, 0x3f, 0x3a, 0xa3, 0x0b, 0xbe, 0xd8, 0x77, 0x6b, 0x69, 0xdf, 0xd1,
	0x36, 0xe4, 0x54, 0xd0, 0xbb, 0x62, 0xd4, 0xc9, 0xab, 0x93, 0x45, 0x42, 0x7d, 0x44, 0x46, 0xbe,
	0xb3, 0x19, 0x6d, 0x05, 0x1f, 0xf9, 0xc5, 0x5f, 0x35, 0x30, 0xe4, 0xaf, 0xfa, 0x04, 0xd2, 0x73,
	0x3a, 0x5b, 0xf8, 0xaa, 0x00, 0xda, 0x03, 0x8b, 0x30, 0xd6, 0xa4, 0x82, 0x54, 0x89, 0x20, 0xca,
	0xdb, 0x3c, 0x5e, 0x4e, 0xa1, 0x03, 0xd8, 0x20, 0xd1, 0x47, 0x42, 0xcd, 0x61, 0x1d, 0x3d, 0xba,
	0xf5, 0xf5, 0xa8, 0xa5, 0x70, 0xc2, 0x41, 0x25, 0xc8, 0x4c, 0xd4, 0x83, 0x51, 0xb3, 0x59, 0x47,
	0xf6, 0xfa, 0x43, 0xaa, 0xa5, 0x70, 0xcc, 0x40, 0x9f, 0x41, 0xfe, 0x7c, 0x69, 0xf1, 0xd4, 0xd4,
	0xd6, 0xd1, 0xd6, 0x42, 0xb1, 0xbc, 0x96, 0xb5, 0x14, 0x5e, 0x61, 0xbf, 0x48, 0x83, 0x31, 0xa7,
	0xb3, 0xe2, 0x08, 0x72, 0x98, 0xb3, 0x78, 0x79, 0x10, 0x98, 0x67, 0xe1, 0x30, 0xfa, 0xe2, 0xa6,
	0xb1, 0x8a, 0xa5, 0x25, 0x53, 0xee, 0xc7, 0x6b, 0x23, 0xc3, 0x85, 0x15, 0xc6, 0x3d, 0x56, 0x98,
	0xb7, 0xac, 0x28, 0xfe, 0x2c, 0xad, 0xe4, 0x0c, 0x7d, 0x00, 0x99, 0x73, 0xd5, 0x2f, 0x5e, 0xf1,
	0xc7, 0x8b, 0x89, 0x6f, 0x46, 0xc1, 0x31, 0xe5, 0xc6, 0x3f, 0xce, 0xfe, 0xc6, 0x3f, 0xce, 0x6e,
	0xfc, 0xe3, 0x2c, 0xf1, 0x8f, 0xb3, 0xbb, 0xfd, 0x53, 0xe4, 0x98, 0xb1, 0xea, 0x1f, 0x67, 0xf7,
	0xf9, 0xa7, 0x74, 0x2b, 0x6c, 0xe5, 0x1f, 0x67, 0xa5, 0xcf, 0x21, 0xdb, 0x49, 0xb6, 0xf6, 0x21,
	0x58, 0xa7, 0x1e, 0xee, 0x9f, 0x74, 0xbd, 0x86, 0xd7, 0xed, 0xda, 0x29, 0x94, 0x83, 0x74, 0xd3,
	0xfd, 0xa2, 0x8d, 0xe3, 0xb0, 0xde, 0x6a, 0x63, 0x5b, 0x97, 0x61, 0xc7, 0xed, 0x55, 0x6a, 0x76,
	0xaa, 0xa0, 0xdb, 0x5a, 0xe9, 0x7d, 0x48, 0x37, 0x89, 0x3f, 0x3a, 0x43, 0x8f, 0x60, 0xb3, 0xe9,
	0x1e, 0xd7, 0x2b, 0x4b, 0x05, 0xb2, 0x60, 0x9c, 0xba, 0x0d, 0xfb, 0x6d, 0xbe, 0x74, 0x0a, 0x46,
	0x83, 0x06, 0xb2, 0x45, 0xc3, 0x6b, 0xad, 0xb7, 0x38, 0xae, 0x57, 0x6c, 0x1d, 0x59, 0xb0, 0xd1,
	0x71, 0x2b, 0x5f, 0xba, 0xc7, 0x9e, 0x6d, 0xca, 0xfc, 0xcb, 0x86, 0x7b, 0xdc, 0xb5, 0x35, 0x04,
	0x90, 0xa9, 0x79, 0x6e, 0xd5, 0xc3, 0x11, 0x07, 0x7b, 0x5d, 0x0f, 0x9f, 0x7a, 0xb6, 0xa6, 0xba,
	0x53, 0x30, 0x9a, 0xe4, 0x7b, 0x59, 0xb7, 0xe9, 0x7e, 0xbd, 0x54, 0x77, 0x13, 0x72, 0x8d, 0xf6,
	0x71, 0xbf, 0xd2, 0x3e, 0x69, 0xf5, 0xec, 0x21, 0x42, 0x90, 0x3f, 0xa9, 0x76, 0xfa, 0x32, 0xd5,
	0xad, 0xbf, 0xf6, 0xec, 0x37, 0x7f, 0x18, 0x68, 0x0b, 0x6c, 0xec, 0x7e, 0xd5, 0x5f, 0xc9, 0xff,
	0xfe, 0xa7, 0x21, 0xb9, 0xbd, 0xca, 0x32, 0xf7, 0xcd, 0x5e, 0xe9, 0x02, 0xcc, 0x97, 0x13, 0xe2,
	0xcb, 0xb2, 0x72, 0xac, 0x7e, 0xab, 0xdd, 0xf2, 0xec, 0x14, 0x7a, 0x0c, 0x0f, 0x15, 0xac, 0xb4,
	0x9b, 0x1d, 0xec, 0x75, 0xbb, 0x5e, 0xd5, 0xd6, 0x10, 0x82, 0x07, 0x2a, 0xe9, 0xb5, 0x2a, 0xf8,
	0x55, 0xa7, 0xe7, 0x55, 0x6d, 0x1d, 0x15, 0x60, 0x6b, 0x8d, 0xd8, 0x8f, 0xef, 0x64, 0xa2, 0x77,
	0xe1, 0x9d, 0x55, 0x7e, 0x72, 0x94, 0x7d, 0xf1, 0xea, 0xc7, 0xeb, 0x1d, 0xed, 0xa7, 0xeb, 0x1d,
	0xed, 0xb7, 0xeb, 0x1d, 0x0d, 0x76, 0x05, 0x0d, 0xce, 0x68, 0x20, 0xca, 0x67, 0xe1, 0x34, 0xfa,
	0x95, 0xcb, 0xc9, 0xdf, 0x93, 0xf2, 0xb7, 0xe4, 0x92, 0xbc, 0x2e, 0xf9, 0x23, 0x71, 0x7e, 0x31,
	0x90, 0xe7, 0x87, 0x31, 0xf7, 0xd0, 0x27, 0x53, 0x7a, 0x30, 0x09, 0xfd, 0x03, 0x3e, 0x1c, 0x1f,
	0x28, 0xee, 0x21, 0x1b, 0xf8, 0xe1, 0x20, 0xa3, 0xe2, 0x67, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x07, 0x6f, 0x3f, 0x0e, 0xe8, 0x08, 0x00, 0x00,
}

func (m *Log) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Log) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Log) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Seq != 0 {
		i = encodeVarintTglogV3(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Annotations) > 0 {
		for k := range m.Annotations {
			v := m.Annotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTglogV3(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTglogV3(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTglogV3(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTglogV3(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTglogV3(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTglogV3(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AuthRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Logs) > 0 {
		for iNdEx := len(m.Logs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Logs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTglogV3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Annotations) > 0 {
		for k := range m.Annotations {
			v := m.Annotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTglogV3(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTglogV3(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTglogV3(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTglogV3(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTglogV3(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTglogV3(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LogRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Seqs) > 0 {
		dAtA2 := make([]byte, len(m.Seqs)*10)
		var j1 int
		for _, num := range m.Seqs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTglogV3(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HeartbeatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeartbeatReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ping != nil {
		{
			size, err := m.Ping.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTglogV3(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HeartbeatRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeartbeatRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pong != nil {
		{
			size, err := m.Pong.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTglogV3(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.TokenType) > 0 {
		i -= len(m.TokenType)
		copy(dAtA[i:], m.TokenType)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.TokenType)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Ts != nil {
		{
			size, err := m.Ts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTglogV3(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.HostIP) > 0 {
		i -= len(m.HostIP)
		copy(dAtA[i:], m.HostIP)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.HostIP)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ProtoVer) > 0 {
		i -= len(m.ProtoVer)
		copy(dAtA[i:], m.ProtoVer)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.ProtoVer)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Network) > 0 {
		i -= len(m.Network)
		copy(dAtA[i:], m.Network)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.Network)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SdkOS) > 0 {
		i -= len(m.SdkOS)
		copy(dAtA[i:], m.SdkOS)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.SdkOS)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SdkVer) > 0 {
		i -= len(m.SdkVer)
		copy(dAtA[i:], m.SdkVer)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.SdkVer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SdkLang) > 0 {
		i -= len(m.SdkLang)
		copy(dAtA[i:], m.SdkLang)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.SdkLang)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AppVer) > 0 {
		i -= len(m.AppVer)
		copy(dAtA[i:], m.AppVer)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.AppVer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppID) > 0 {
		i -= len(m.AppID)
		copy(dAtA[i:], m.AppID)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.AppID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Req) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Req) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Req) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Req != nil {
		{
			size := m.Req.Size()
			i -= size
			if _, err := m.Req.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.AppMetaData) > 0 {
		i -= len(m.AppMetaData)
		copy(dAtA[i:], m.AppMetaData)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.AppMetaData)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReqID) > 0 {
		i -= len(m.ReqID)
		copy(dAtA[i:], m.ReqID)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.ReqID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Req_AuthReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Req_AuthReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AuthReq != nil {
		{
			size, err := m.AuthReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTglogV3(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Req_LogReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Req_LogReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReq != nil {
		{
			size, err := m.LogReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTglogV3(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *Req_HeartbeatReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Req_HeartbeatReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HeartbeatReq != nil {
		{
			size, err := m.HeartbeatReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTglogV3(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *RspHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RspHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RspHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AppMetaData) > 0 {
		i -= len(m.AppMetaData)
		copy(dAtA[i:], m.AppMetaData)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.AppMetaData)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ReqID) > 0 {
		i -= len(m.ReqID)
		copy(dAtA[i:], m.ReqID)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.ReqID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintTglogV3(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintTglogV3(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rsp != nil {
		{
			size := m.Rsp.Size()
			i -= size
			if _, err := m.Rsp.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTglogV3(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rsp_AuthRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rsp_AuthRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AuthRsp != nil {
		{
			size, err := m.AuthRsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTglogV3(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Rsp_LogRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rsp_LogRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogRsp != nil {
		{
			size, err := m.LogRsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTglogV3(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *Rsp_HeartbeatRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rsp_HeartbeatRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HeartbeatRsp != nil {
		{
			size, err := m.HeartbeatRsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTglogV3(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTglogV3(dAtA []byte, offset int, v uint64) int {
	offset -= sovTglogV3(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Log) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovTglogV3(uint64(m.Seq))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTglogV3(uint64(len(k))) + 1 + len(v) + sovTglogV3(uint64(len(v)))
			n += mapEntrySize + 1 + sovTglogV3(uint64(mapEntrySize))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTglogV3(uint64(len(k))) + 1 + len(v) + sovTglogV3(uint64(len(v)))
			n += mapEntrySize + 1 + sovTglogV3(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTglogV3(uint64(len(k))) + 1 + len(v) + sovTglogV3(uint64(len(v)))
			n += mapEntrySize + 1 + sovTglogV3(uint64(mapEntrySize))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTglogV3(uint64(len(k))) + 1 + len(v) + sovTglogV3(uint64(len(v)))
			n += mapEntrySize + 1 + sovTglogV3(uint64(mapEntrySize))
		}
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovTglogV3(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Seqs) > 0 {
		l = 0
		for _, e := range m.Seqs {
			l += sovTglogV3(uint64(e))
		}
		n += 1 + sovTglogV3(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HeartbeatReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ping != nil {
		l = m.Ping.Size()
		n += 1 + l + sovTglogV3(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HeartbeatRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pong != nil {
		l = m.Pong.Size()
		n += 1 + l + sovTglogV3(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	l = len(m.AppVer)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	l = len(m.SdkLang)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	l = len(m.SdkVer)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	l = len(m.SdkOS)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	l = len(m.ProtoVer)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	l = len(m.HostIP)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	if m.Ts != nil {
		l = m.Ts.Size()
		n += 1 + l + sovTglogV3(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	l = len(m.TokenType)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Req) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReqID)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	l = len(m.AppMetaData)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	if m.Req != nil {
		n += m.Req.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Req_AuthReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthReq != nil {
		l = m.AuthReq.Size()
		n += 1 + l + sovTglogV3(uint64(l))
	}
	return n
}
func (m *Req_LogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReq != nil {
		l = m.LogReq.Size()
		n += 1 + l + sovTglogV3(uint64(l))
	}
	return n
}
func (m *Req_HeartbeatReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeartbeatReq != nil {
		l = m.HeartbeatReq.Size()
		n += 1 + l + sovTglogV3(uint64(l))
	}
	return n
}
func (m *RspHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovTglogV3(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	l = len(m.ReqID)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	l = len(m.AppMetaData)
	if l > 0 {
		n += 1 + l + sovTglogV3(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Rsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTglogV3(uint64(l))
	}
	if m.Rsp != nil {
		n += m.Rsp.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Rsp_AuthRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthRsp != nil {
		l = m.AuthRsp.Size()
		n += 1 + l + sovTglogV3(uint64(l))
	}
	return n
}
func (m *Rsp_LogRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogRsp != nil {
		l = m.LogRsp.Size()
		n += 1 + l + sovTglogV3(uint64(l))
	}
	return n
}
func (m *Rsp_HeartbeatRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeartbeatRsp != nil {
		l = m.HeartbeatRsp.Size()
		n += 1 + l + sovTglogV3(uint64(l))
	}
	return n
}

func sovTglogV3(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTglogV3(x uint64) (n int) {
	return sovTglogV3(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Log) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTglogV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Log: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Log: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTglogV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTglogV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTglogV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTglogV3
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTglogV3
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTglogV3
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTglogV3
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTglogV3
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTglogV3
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTglogV3
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTglogV3(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTglogV3
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTglogV3
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTglogV3
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTglogV3
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTglogV3
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTglogV3
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTglogV3
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTglogV3
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTglogV3(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTglogV3
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTglogV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTglogV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTglogV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTglogV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTglogV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTglogV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTglogV3
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTglogV3
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTglogV3
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTglogV3
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTglogV3
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTglogV3
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTglogV3
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTglogV3(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTglogV3
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTglogV3
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTglogV3
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTglogV3
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTglogV3
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTglogV3
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTglogV3
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTglogV3
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTglogV3(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTglogV3
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &Log{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTglogV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTglogV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTglogV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTglogV3
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Seqs = append(m.Seqs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTglogV3
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTglogV3
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTglogV3
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Seqs) == 0 {
					m.Seqs = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTglogV3
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Seqs = append(m.Seqs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTglogV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTglogV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTglogV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ping == nil {
				m.Ping = &types.Timestamp{}
			}
			if err := m.Ping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTglogV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTglogV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTglogV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pong", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pong == nil {
				m.Pong = &types.Timestamp{}
			}
			if err := m.Pong.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTglogV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTglogV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTglogV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SdkLang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SdkLang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SdkVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SdkVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SdkOS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SdkOS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtoVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtoVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ts == nil {
				m.Ts = &types.Timestamp{}
			}
			if err := m.Ts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTglogV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTglogV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Req) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTglogV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppMetaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppMetaData = append(m.AppMetaData[:0], dAtA[iNdEx:postIndex]...)
			if m.AppMetaData == nil {
				m.AppMetaData = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &Req_AuthReq{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &Req_LogReq{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HeartbeatReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &Req_HeartbeatReq{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTglogV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTglogV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RspHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTglogV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RspHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RspHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppMetaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppMetaData = append(m.AppMetaData[:0], dAtA[iNdEx:postIndex]...)
			if m.AppMetaData == nil {
				m.AppMetaData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTglogV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTglogV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTglogV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RspHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthRsp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Rsp = &Rsp_AuthRsp{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogRsp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Rsp = &Rsp_LogRsp{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTglogV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTglogV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HeartbeatRsp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Rsp = &Rsp_HeartbeatRsp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTglogV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTglogV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTglogV3(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTglogV3
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTglogV3
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTglogV3
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTglogV3
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTglogV3
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTglogV3        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTglogV3          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTglogV3 = fmt.Errorf("proto: unexpected end of group")
)
